grammar de.itemis.mpp.Pom with org.eclipse.xtext.common.Terminals

generate pom "http://www.itemis.de/mpp/Pom"

POM:
  imports+=POMImport*
  parent=ParentRef?
  artifactDefinition=ArtifactDefinition
  modules=Modules?
  (properties=Properties? &
  dependencies=Dependencies? &
  scm=SCM? &
  repositories+=Repository*)
  buildSteps+=BuildStep*
;

ParentRef:
  'parent' coordinates=Coordinates relativePath=STRING?
;

Modules:
  'modules' names+=STRING (',' names+=STRING)*
;

ArtifactDefinition:
  {ArtifactDefinition}
  ('group' groupId=IDAndSpecialCharacters)?
  ('artifact' artifactId=IDAndSpecialCharacters)?
  ('version' version=Version)?
  ('type' type=Text)?
  (('name' artifactName=STRING)? &
  ('description' description=STRING)?)
;

IDAndDot hidden():
  IDOrPropteryRef ('.' IDOrPropteryRef)*
;

IDAndDash hidden():
  ID ('-' ID)*
;

IDAndSpecialCharacters hidden():
  IDOrKW (=>('-' | '.' | '_') IDOrKW)*
;

IDOrPropteryRefAndSpecialCharacters hidden():
  IDOrPropteryRef (('-' | '.' | '_')* IDOrPropteryRef)*
;

Classifier:
  ID
;

Number:
  INT
;

Text:
  (ID | Number | ANY_OTHER)*
;

PropertyName:
  IDAndSpecialCharacters
;

PropertyRef:
  '${' PropertyName '}'
;

IDOrPropteryRef:
  IDOrKW | PropertyRef
;

IDOrKW:
  ID | 'test' | 'parent' | 'version' | 'exec' | 'clean' | 'plugin' | 'compile' | 'file' | 'from' | 'include'//TODO continue the list of keywords!
;

Version:
//  NumericVersion | IDAndSpecialCharacters
//;
//
//NumericVersion:
  (major=Number ('.' minor=Number ('.' incremental=Number)?)? ('-' qualifier=Text)?) | (propertyRef=PropertyRef)
;

Properties:
  'properties' '{'
    properties+=Property*
    inclusions+=PropertyInclusion*
  '}'
;

Property:
  name=PropertyName '=' value=STRING
;

ImportPropertyInclusion:
  'include' 'from' pomRef=[POMImport]
;

FilePropertyInclusion:
  'include' 'from' 'file' path=STRING
;

PropertyInclusion:
  ImportPropertyInclusion | FilePropertyInclusion
;

Dependencies:
  {Dependencies}
  'dependencies' '{'
    (includes+=DependencyInclusion |
    dependencyGroups+=DependencyGroup |
    ungroupedDependencies+=UngroupedDependency)+
  '}'
;

DependencyGroup:
  scope=DependencyScope '{'
    dependecies+=Dependency+
  '}'
;

UngroupedDependency:
  scope=DependencyScope? dependency=Dependency
;

Dependency:
  (optional?='optional')? coordinates=ExtendedCoordinates
;

DependencyInclusion:
  'include' scope=DependencyScope 'from' pomRef=[POMImport]
;

SCM:
  'scm' '{'
    ('con' connection=STRING)? &
    'dev' developerConncetion=STRING &
    ('url' url=STRING)? &
    ('tag' tag=STRING)?
  '}'
;

Plugin:
  'plugin' coordinates=Coordinates '{'
    (('config' '{' configuration=PluginConfiguration '}')? &
    executions+=PluginExecution*)
    //TODO add dependencies and extensions!
  '}'
;

PluginConfiguration:
    configurationItems+=PluginConfigurationItem+
;

PluginConfigurationItem:
  PluginConfigurationParameter | PluginConfigurationParameterList | PluginConfigurationParameterProperties
;

PluginConfigurationParameter:
  key=IDAndSpecialCharacters (value=STRING | ('{' children+=PluginConfigurationItem+ '}'))?
;

PluginConfigurationParameterList:
  key=IDAndSpecialCharacters '{' values+=STRING (',' values+=STRING)* '}'
;

PluginConfigurationParameterProperties:
  key=IDAndSpecialCharacters '{' entries+=PluginConfigurationParameterPropertyEntry+ '}'
;

PluginConfigurationParameterPropertyEntry:
  key=IDAndSpecialCharacters '=' value=STRING
;

PluginExecution:
  'exec' 
  (id=IDAndDash? ('in' 'phase' phase=Phase)? 'with' 'goals' goals+=IDAndSpecialCharacters (',' goals+=IDAndDash)* ('{' configuration=PluginConfiguration '}')?
  | default?='default')
;

PluginInclusion:
  'include' ((executionId=IDAndDash | config?='config') 'of')? pluginCoordinates=NonVersionedCoordinates 'from' pomRef=[POMImport]
;

BuildStep:
  Plugin | PluginInclusion
;

Coordinates:
  groupId=IDAndSpecialCharacters ':' artifactId=IDAndSpecialCharacters ':' version=Version
;

ExtendedCoordinates:
  groupId=IDAndSpecialCharacters ':' artifactId=IDAndSpecialCharacters ':' version=Version (':' type=ID (':' classifier=Classifier)?)?
;

NonVersionedCoordinates:
  groupId=IDAndSpecialCharacters ':' artifactId=IDAndSpecialCharacters
;

POMImport:
  'import' coordinates=Coordinates 'as' name=ID
;

Repository:
  ('repository' | pluginRepositroy?='plugin-repository') id=IDAndSpecialCharacters 'at' url=STRING
  ('{'
    (('name' name=STRING)? &
    ('layout' layout=STRING)?) 
    policies+=RepositoryPolicy+
   '}'
  )?
;

RepositoryPolicy:
  (disabled?='do not')? 'fetch' (releases?='releases' | snapshots?='snapshots') (',' 'update' updatePolicy=RepositoryUpdatePolicy ('with' 'interval' '=' updateInterval=INT)?)? (',' 'checksumPolicy' checksumPolicy=ChecksumPolicy)?
;

terminal ID:
  ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z')*
;

enum DependencyScope:
  COMPILE='compile' | PROVIDED='provided' | RUNTIME='runtime' | SYSTEM='system' | TEST='test' | IMPORT='import'
;

enum Phase:
  DEFAULT='default' | PRE_CLEAN='pre-clean' | CLEAN='clean' | POST_CLEAN='post-clean' | VALIDATE='validate' |
  INITIALIZE='initialize' | GENERATE_SOURCES='generate-sources' | PROCESS_SOURCES='process-sources' |
  GENERATE_RESOURCES='generate-resources' | PROCESS_RESOURCES='process-resources' | COMPILE='compile' |
  PROCESS_CLASSES='process-classes' | GENERATE_TEST_SOURCES='generate-test-sources' |
  PROCESS_TEST_SOURCES='process-test-sources' | GENERATE_TEST_RESOURCES='generate-test-resources' |
  PROCESS_TEST_RESOURCES='process-test-resources' | TEST_COMPILE='test-compile' |
  PROCESS_TEST_CLASSES='process-test-classes' | TEST='test' | PREPARE_PACKAGE='prepare-package' | PACKAGE='package' |
  PRE_INTEGRATION_TEST='pre-integration-test' | INTEGRATION_TEST='integration-test' |
  POST_INTEGRATION_TEST='post-integration-test' | VERIFY='verify' | INSTALL='install' | DEPLOY='deploy' |
  PRE_SITE='pre-site' | SITE='site' | POST_SITE='post-site' | SITE_DEPLOY='site-deploy'
;

enum RepositoryUpdatePolicy:
  DAILY='daily' | ALWAYS='always' | NEVER='never' | INTERVAL='interval'
;

enum ChecksumPolicy:
  IGNORE='ignore' | WARN='warn' | FAIL='fail'
;