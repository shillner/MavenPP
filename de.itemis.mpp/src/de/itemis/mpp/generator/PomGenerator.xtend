/*
 * generated by Xtext
 */
package de.itemis.mpp.generator

import com.google.inject.Inject
import com.google.inject.name.Named
import de.itemis.mpp.pom.POM
import de.itemis.mpp.util.EMFUtil
import de.itemis.mpp.util.MppModelUtil
import java.io.IOException
import java.io.StringWriter
import java.io.Writer
import org.apache.maven.model.io.DefaultModelWriter
import org.apache.maven.project.MavenProject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

class PomGenerator implements IGenerator {
  @Inject
  var extension MppModelUtil modelUtil;

  @Inject
  @Named(MppModelProcessor.ARTIFACT)
  var MppModelProcessor artifactProcessor

  @Inject
  @Named(MppModelProcessor.BUILD_STEP)
  var MppModelProcessor buildStepProcessor

  @Inject
  @Named(MppModelProcessor.DEPENDENCIES)
  var MppModelProcessor dependencyProcessor
  
  @Inject
  @Named(MppModelProcessor.PROPERTIES)
  var MppModelProcessor propertiesProcessor
  
  @Inject
  @Named(MppModelProcessor.REPOSITORIES)
  var MppModelProcessor repositoriesProcessor

  override void doGenerate(Resource resource, IFileSystemAccess fsa) {
    val project = new MavenProject
    val model = project.model
    model.version = "4.0.0"

    val POM pom = resource.allContents.next as POM
    artifactProcessor.process(pom, model)
    propertiesProcessor.process(pom, model)
    repositoriesProcessor.process(pom, model)
    dependencyProcessor.process(pom, model)
    buildStepProcessor.process(pom, model)

    try {
      val Writer outputWriter = new StringWriter
      new DefaultModelWriter().write(outputWriter, null, model)
      fsa.generateFile(EMFUtil.getOutputFileName(resource),
        MppMultiOutputConfigurationProvider.OUTPUT_CONFIGURATION_POM, outputWriter.toString())
    } catch(IOException e) {
      throw new RuntimeException(e)
    }
  }
}
