/*
 * generated by Xtext
 */
package de.itemis.mpp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PomGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class POMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsPOMImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cParentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParentParentRefParserRuleCall_1_0 = (RuleCall)cParentAssignment_1.eContents().get(0);
		private final Assignment cArtifactDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArtifactDefinitionArtifactDefinitionParserRuleCall_2_0 = (RuleCall)cArtifactDefinitionAssignment_2.eContents().get(0);
		private final Assignment cModulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModulesModulesParserRuleCall_3_0 = (RuleCall)cModulesAssignment_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cPropertyInclusionsAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cPropertyInclusionsPropertyInclusionParserRuleCall_4_0_0 = (RuleCall)cPropertyInclusionsAssignment_4_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_1_0 = (RuleCall)cPropertiesAssignment_4_1.eContents().get(0);
		private final Assignment cDependenciesAssignment_4_2 = (Assignment)cUnorderedGroup_4.eContents().get(2);
		private final RuleCall cDependenciesDependenciesParserRuleCall_4_2_0 = (RuleCall)cDependenciesAssignment_4_2.eContents().get(0);
		private final Assignment cScmAssignment_4_3 = (Assignment)cUnorderedGroup_4.eContents().get(3);
		private final RuleCall cScmSCMParserRuleCall_4_3_0 = (RuleCall)cScmAssignment_4_3.eContents().get(0);
		private final Assignment cBuildStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBuildStepsBuildStepParserRuleCall_5_0 = (RuleCall)cBuildStepsAssignment_5.eContents().get(0);
		
		//POM:
		//	imports+=POMImport* parent=ParentRef? artifactDefinition=ArtifactDefinition modules=Modules?
		//	(propertyInclusions+=PropertyInclusion* & properties+=Property* & dependencies=Dependencies? & scm=SCM?)
		//	buildSteps+=BuildStep*;
		@Override public ParserRule getRule() { return rule; }

		//imports+=POMImport* parent=ParentRef? artifactDefinition=ArtifactDefinition modules=Modules?
		//(propertyInclusions+=PropertyInclusion* & properties+=Property* & dependencies=Dependencies? & scm=SCM?)
		//buildSteps+=BuildStep*
		public Group getGroup() { return cGroup; }

		//imports+=POMImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//POMImport
		public RuleCall getImportsPOMImportParserRuleCall_0_0() { return cImportsPOMImportParserRuleCall_0_0; }

		//parent=ParentRef?
		public Assignment getParentAssignment_1() { return cParentAssignment_1; }

		//ParentRef
		public RuleCall getParentParentRefParserRuleCall_1_0() { return cParentParentRefParserRuleCall_1_0; }

		//artifactDefinition=ArtifactDefinition
		public Assignment getArtifactDefinitionAssignment_2() { return cArtifactDefinitionAssignment_2; }

		//ArtifactDefinition
		public RuleCall getArtifactDefinitionArtifactDefinitionParserRuleCall_2_0() { return cArtifactDefinitionArtifactDefinitionParserRuleCall_2_0; }

		//modules=Modules?
		public Assignment getModulesAssignment_3() { return cModulesAssignment_3; }

		//Modules
		public RuleCall getModulesModulesParserRuleCall_3_0() { return cModulesModulesParserRuleCall_3_0; }

		//propertyInclusions+=PropertyInclusion* & properties+=Property* & dependencies=Dependencies? & scm=SCM?
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//propertyInclusions+=PropertyInclusion*
		public Assignment getPropertyInclusionsAssignment_4_0() { return cPropertyInclusionsAssignment_4_0; }

		//PropertyInclusion
		public RuleCall getPropertyInclusionsPropertyInclusionParserRuleCall_4_0_0() { return cPropertyInclusionsPropertyInclusionParserRuleCall_4_0_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_4_1() { return cPropertiesAssignment_4_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_1_0() { return cPropertiesPropertyParserRuleCall_4_1_0; }

		//dependencies=Dependencies?
		public Assignment getDependenciesAssignment_4_2() { return cDependenciesAssignment_4_2; }

		//Dependencies
		public RuleCall getDependenciesDependenciesParserRuleCall_4_2_0() { return cDependenciesDependenciesParserRuleCall_4_2_0; }

		//scm=SCM?
		public Assignment getScmAssignment_4_3() { return cScmAssignment_4_3; }

		//SCM
		public RuleCall getScmSCMParserRuleCall_4_3_0() { return cScmSCMParserRuleCall_4_3_0; }

		//buildSteps+=BuildStep*
		public Assignment getBuildStepsAssignment_5() { return cBuildStepsAssignment_5; }

		//BuildStep
		public RuleCall getBuildStepsBuildStepParserRuleCall_5_0() { return cBuildStepsBuildStepParserRuleCall_5_0; }
	}

	public class ParentRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParentRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCoordinatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoordinatesCoordinatesParserRuleCall_1_0 = (RuleCall)cCoordinatesAssignment_1.eContents().get(0);
		private final Assignment cRelativePathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelativePathSTRINGTerminalRuleCall_2_0 = (RuleCall)cRelativePathAssignment_2.eContents().get(0);
		
		//ParentRef:
		//	"parent" coordinates=Coordinates relativePath=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//"parent" coordinates=Coordinates relativePath=STRING?
		public Group getGroup() { return cGroup; }

		//"parent"
		public Keyword getParentKeyword_0() { return cParentKeyword_0; }

		//coordinates=Coordinates
		public Assignment getCoordinatesAssignment_1() { return cCoordinatesAssignment_1; }

		//Coordinates
		public RuleCall getCoordinatesCoordinatesParserRuleCall_1_0() { return cCoordinatesCoordinatesParserRuleCall_1_0; }

		//relativePath=STRING?
		public Assignment getRelativePathAssignment_2() { return cRelativePathAssignment_2; }

		//STRING
		public RuleCall getRelativePathSTRINGTerminalRuleCall_2_0() { return cRelativePathSTRINGTerminalRuleCall_2_0; }
	}

	public class ModulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModulesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesSTRINGTerminalRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		
		//Modules:
		//	"modules" names+=STRING ("," names+=STRING)*;
		@Override public ParserRule getRule() { return rule; }

		//"modules" names+=STRING ("," names+=STRING)*
		public Group getGroup() { return cGroup; }

		//"modules"
		public Keyword getModulesKeyword_0() { return cModulesKeyword_0; }

		//names+=STRING
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//STRING
		public RuleCall getNamesSTRINGTerminalRuleCall_1_0() { return cNamesSTRINGTerminalRuleCall_1_0; }

		//("," names+=STRING)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//names+=STRING
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }

		//STRING
		public RuleCall getNamesSTRINGTerminalRuleCall_2_1_0() { return cNamesSTRINGTerminalRuleCall_2_1_0; }
	}

	public class ArtifactDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArtifactDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArtifactDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGroupKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGroupIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGroupIdIDAndSpecialCharactersParserRuleCall_1_1_0 = (RuleCall)cGroupIdAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cArtifactKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArtifactIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArtifactIdIDAndSpecialCharactersParserRuleCall_2_1_0 = (RuleCall)cArtifactIdAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVersionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVersionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVersionVersionParserRuleCall_3_1_0 = (RuleCall)cVersionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTextParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cNameKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cArtifactNameAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cArtifactNameSTRINGTerminalRuleCall_5_0_1_0 = (RuleCall)cArtifactNameAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cDescriptionKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_1_1_0 = (RuleCall)cDescriptionAssignment_5_1_1.eContents().get(0);
		
		//ArtifactDefinition:
		//	{ArtifactDefinition} ("group" groupId=IDAndSpecialCharacters)? ("artifact" artifactId=IDAndSpecialCharacters)?
		//	("version" version=Version)? ("type" type=Text)? (("name" artifactName=STRING)? & ("description"
		//	description=STRING)?);
		@Override public ParserRule getRule() { return rule; }

		//{ArtifactDefinition} ("group" groupId=IDAndSpecialCharacters)? ("artifact" artifactId=IDAndSpecialCharacters)?
		//("version" version=Version)? ("type" type=Text)? (("name" artifactName=STRING)? & ("description" description=STRING)?)
		public Group getGroup() { return cGroup; }

		//{ArtifactDefinition}
		public Action getArtifactDefinitionAction_0() { return cArtifactDefinitionAction_0; }

		//("group" groupId=IDAndSpecialCharacters)?
		public Group getGroup_1() { return cGroup_1; }

		//"group"
		public Keyword getGroupKeyword_1_0() { return cGroupKeyword_1_0; }

		//groupId=IDAndSpecialCharacters
		public Assignment getGroupIdAssignment_1_1() { return cGroupIdAssignment_1_1; }

		//IDAndSpecialCharacters
		public RuleCall getGroupIdIDAndSpecialCharactersParserRuleCall_1_1_0() { return cGroupIdIDAndSpecialCharactersParserRuleCall_1_1_0; }

		//("artifact" artifactId=IDAndSpecialCharacters)?
		public Group getGroup_2() { return cGroup_2; }

		//"artifact"
		public Keyword getArtifactKeyword_2_0() { return cArtifactKeyword_2_0; }

		//artifactId=IDAndSpecialCharacters
		public Assignment getArtifactIdAssignment_2_1() { return cArtifactIdAssignment_2_1; }

		//IDAndSpecialCharacters
		public RuleCall getArtifactIdIDAndSpecialCharactersParserRuleCall_2_1_0() { return cArtifactIdIDAndSpecialCharactersParserRuleCall_2_1_0; }

		//("version" version=Version)?
		public Group getGroup_3() { return cGroup_3; }

		//"version"
		public Keyword getVersionKeyword_3_0() { return cVersionKeyword_3_0; }

		//version=Version
		public Assignment getVersionAssignment_3_1() { return cVersionAssignment_3_1; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_3_1_0() { return cVersionVersionParserRuleCall_3_1_0; }

		//("type" type=Text)?
		public Group getGroup_4() { return cGroup_4; }

		//"type"
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//type=Text
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//Text
		public RuleCall getTypeTextParserRuleCall_4_1_0() { return cTypeTextParserRuleCall_4_1_0; }

		//("name" artifactName=STRING)? & ("description" description=STRING)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//("name" artifactName=STRING)?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"name"
		public Keyword getNameKeyword_5_0_0() { return cNameKeyword_5_0_0; }

		//artifactName=STRING
		public Assignment getArtifactNameAssignment_5_0_1() { return cArtifactNameAssignment_5_0_1; }

		//STRING
		public RuleCall getArtifactNameSTRINGTerminalRuleCall_5_0_1_0() { return cArtifactNameSTRINGTerminalRuleCall_5_0_1_0; }

		//("description" description=STRING)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"description"
		public Keyword getDescriptionKeyword_5_1_0() { return cDescriptionKeyword_5_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_5_1_1() { return cDescriptionAssignment_5_1_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_1_1_0() { return cDescriptionSTRINGTerminalRuleCall_5_1_1_0; }
	}

	public class IDAndDotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDAndDot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDOrPropteryRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDOrPropteryRefParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IDAndDot:
		//	IDOrPropteryRef ("." IDOrPropteryRef)*;
		@Override public ParserRule getRule() { return rule; }

		//IDOrPropteryRef ("." IDOrPropteryRef)*
		public Group getGroup() { return cGroup; }

		//IDOrPropteryRef
		public RuleCall getIDOrPropteryRefParserRuleCall_0() { return cIDOrPropteryRefParserRuleCall_0; }

		//("." IDOrPropteryRef)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//IDOrPropteryRef
		public RuleCall getIDOrPropteryRefParserRuleCall_1_1() { return cIDOrPropteryRefParserRuleCall_1_1; }
	}

	public class IDAndDashElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDAndDash");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IDAndDash:
		//	ID ("-" ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("-" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("-" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class IDAndSpecialCharactersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDAndSpecialCharacters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDOrPropteryRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword c_Keyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cIDOrPropteryRefParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IDAndSpecialCharacters:
		//	IDOrPropteryRef (("-" | "." | "_")* IDOrPropteryRef)*;
		@Override public ParserRule getRule() { return rule; }

		//IDOrPropteryRef (("-" | "." | "_")* IDOrPropteryRef)*
		public Group getGroup() { return cGroup; }

		//IDOrPropteryRef
		public RuleCall getIDOrPropteryRefParserRuleCall_0() { return cIDOrPropteryRefParserRuleCall_0; }

		//(("-" | "." | "_")* IDOrPropteryRef)*
		public Group getGroup_1() { return cGroup_1; }

		//("-" | "." | "_")*
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//"_"
		public Keyword get_Keyword_1_0_2() { return c_Keyword_1_0_2; }

		//IDOrPropteryRef
		public RuleCall getIDOrPropteryRefParserRuleCall_1_1() { return cIDOrPropteryRefParserRuleCall_1_1; }
	}

	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classifier");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Classifier:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Number:
		//	INT;
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Text:
		//	(ID | Number | ANY_OTHER)*;
		@Override public ParserRule getRule() { return rule; }

		//(ID | Number | ANY_OTHER)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2() { return cANY_OTHERTerminalRuleCall_2; }
	}

	public class PropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyName");
		private final RuleCall cIDAndSpecialCharactersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////  (ID | '-' | '_' | '.')*
		//PropertyName:
		//	IDAndSpecialCharacters;
		@Override public ParserRule getRule() { return rule; }

		//IDAndSpecialCharacters
		public RuleCall getIDAndSpecialCharactersParserRuleCall() { return cIDAndSpecialCharactersParserRuleCall; }
	}

	public class IDOrPropteryRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDOrPropteryRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDOrKWParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDollarSignLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPropertyNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//IDOrPropteryRef:
		//	IDOrKW | "${" PropertyName "}";
		@Override public ParserRule getRule() { return rule; }

		//IDOrKW | "${" PropertyName "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDOrKW
		public RuleCall getIDOrKWParserRuleCall_0() { return cIDOrKWParserRuleCall_0; }

		//"${" PropertyName "}"
		public Group getGroup_1() { return cGroup_1; }

		//"${"
		public Keyword getDollarSignLeftCurlyBracketKeyword_1_0() { return cDollarSignLeftCurlyBracketKeyword_1_0; }

		//PropertyName
		public RuleCall getPropertyNameParserRuleCall_1_1() { return cPropertyNameParserRuleCall_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class IDOrKWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDOrKW");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cTestKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cParentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//IDOrKW:
		//	ID | "test" | //TODO continue the list of keywords!
		//	"parent";
		@Override public ParserRule getRule() { return rule; }

		//ID | "test" | //TODO continue the list of keywords!
		//"parent"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"test"
		public Keyword getTestKeyword_1() { return cTestKeyword_1; }

		////TODO continue the list of keywords!
		//"parent"
		public Keyword getParentKeyword_2() { return cParentKeyword_2; }
	}

	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMajorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMajorNumberParserRuleCall_0_0 = (RuleCall)cMajorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMinorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMinorNumberParserRuleCall_1_1_0 = (RuleCall)cMinorAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIncrementalAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIncrementalNumberParserRuleCall_1_2_1_0 = (RuleCall)cIncrementalAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cQualifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQualifierTextParserRuleCall_2_1_0 = (RuleCall)cQualifierAssignment_2_1.eContents().get(0);
		
		//Version: //  NumericVersion | IDAndSpecialCharacters
		////;
		////
		////NumericVersion:
		//	major=Number ("." minor=Number ("." incremental=Number)?)? ("-" qualifier=Text)?;
		@Override public ParserRule getRule() { return rule; }

		////  NumericVersion | IDAndSpecialCharacters
		////;
		////
		////NumericVersion:
		//major=Number ("." minor=Number ("." incremental=Number)?)? ("-" qualifier=Text)?
		public Group getGroup() { return cGroup; }

		////  NumericVersion | IDAndSpecialCharacters
		////;
		////
		////NumericVersion:
		//major=Number
		public Assignment getMajorAssignment_0() { return cMajorAssignment_0; }

		//Number
		public RuleCall getMajorNumberParserRuleCall_0_0() { return cMajorNumberParserRuleCall_0_0; }

		//("." minor=Number ("." incremental=Number)?)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//minor=Number
		public Assignment getMinorAssignment_1_1() { return cMinorAssignment_1_1; }

		//Number
		public RuleCall getMinorNumberParserRuleCall_1_1_0() { return cMinorNumberParserRuleCall_1_1_0; }

		//("." incremental=Number)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"."
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }

		//incremental=Number
		public Assignment getIncrementalAssignment_1_2_1() { return cIncrementalAssignment_1_2_1; }

		//Number
		public RuleCall getIncrementalNumberParserRuleCall_1_2_1_0() { return cIncrementalNumberParserRuleCall_1_2_1_0; }

		//("-" qualifier=Text)?
		public Group getGroup_2() { return cGroup_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }

		//qualifier=Text
		public Assignment getQualifierAssignment_2_1() { return cQualifierAssignment_2_1; }

		//Text
		public RuleCall getQualifierTextParserRuleCall_2_1_0() { return cQualifierTextParserRuleCall_2_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePropertyNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Property:
		//	"property" name=PropertyName "=" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//"property" name=PropertyName "=" value=STRING
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=PropertyName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PropertyName
		public RuleCall getNamePropertyNameParserRuleCall_1_0() { return cNamePropertyNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class PropertyInclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyInclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPomRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPomRefPOMImportCrossReference_1_0 = (CrossReference)cPomRefAssignment_1.eContents().get(0);
		private final RuleCall cPomRefPOMImportIDTerminalRuleCall_1_0_1 = (RuleCall)cPomRefPOMImportCrossReference_1_0.eContents().get(1);
		private final Keyword cPropertiesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PropertyInclusion:
		//	"include" pomRef=[POMImport] ".properties";
		@Override public ParserRule getRule() { return rule; }

		//"include" pomRef=[POMImport] ".properties"
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//pomRef=[POMImport]
		public Assignment getPomRefAssignment_1() { return cPomRefAssignment_1; }

		//[POMImport]
		public CrossReference getPomRefPOMImportCrossReference_1_0() { return cPomRefPOMImportCrossReference_1_0; }

		//ID
		public RuleCall getPomRefPOMImportIDTerminalRuleCall_1_0_1() { return cPomRefPOMImportIDTerminalRuleCall_1_0_1; }

		//".properties"
		public Keyword getPropertiesKeyword_2() { return cPropertiesKeyword_2; }
	}

	public class DependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDependenciesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDependenciesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIncludesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cIncludesDependencyInclusionParserRuleCall_3_0_0 = (RuleCall)cIncludesAssignment_3_0.eContents().get(0);
		private final Assignment cDependencyGroupsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDependencyGroupsDependencyGroupParserRuleCall_3_1_0 = (RuleCall)cDependencyGroupsAssignment_3_1.eContents().get(0);
		private final Assignment cUngroupedDependenciesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cUngroupedDependenciesUngroupedDependencyParserRuleCall_3_2_0 = (RuleCall)cUngroupedDependenciesAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Dependencies:
		//	{Dependencies} "dependencies" "{" (includes+=DependencyInclusion | dependencyGroups+=DependencyGroup |
		//	ungroupedDependencies+=UngroupedDependency)+ "}";
		@Override public ParserRule getRule() { return rule; }

		//{Dependencies} "dependencies" "{" (includes+=DependencyInclusion | dependencyGroups+=DependencyGroup |
		//ungroupedDependencies+=UngroupedDependency)+ "}"
		public Group getGroup() { return cGroup; }

		//{Dependencies}
		public Action getDependenciesAction_0() { return cDependenciesAction_0; }

		//"dependencies"
		public Keyword getDependenciesKeyword_1() { return cDependenciesKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(includes+=DependencyInclusion | dependencyGroups+=DependencyGroup | ungroupedDependencies+=UngroupedDependency)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//includes+=DependencyInclusion
		public Assignment getIncludesAssignment_3_0() { return cIncludesAssignment_3_0; }

		//DependencyInclusion
		public RuleCall getIncludesDependencyInclusionParserRuleCall_3_0_0() { return cIncludesDependencyInclusionParserRuleCall_3_0_0; }

		//dependencyGroups+=DependencyGroup
		public Assignment getDependencyGroupsAssignment_3_1() { return cDependencyGroupsAssignment_3_1; }

		//DependencyGroup
		public RuleCall getDependencyGroupsDependencyGroupParserRuleCall_3_1_0() { return cDependencyGroupsDependencyGroupParserRuleCall_3_1_0; }

		//ungroupedDependencies+=UngroupedDependency
		public Assignment getUngroupedDependenciesAssignment_3_2() { return cUngroupedDependenciesAssignment_3_2; }

		//UngroupedDependency
		public RuleCall getUngroupedDependenciesUngroupedDependencyParserRuleCall_3_2_0() { return cUngroupedDependenciesUngroupedDependencyParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DependencyGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScopeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScopeDependencyScopeEnumRuleCall_0_0 = (RuleCall)cScopeAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDependeciesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDependeciesDependencyParserRuleCall_2_0 = (RuleCall)cDependeciesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DependencyGroup:
		//	scope=DependencyScope "{" dependecies+=Dependency+ "}";
		@Override public ParserRule getRule() { return rule; }

		//scope=DependencyScope "{" dependecies+=Dependency+ "}"
		public Group getGroup() { return cGroup; }

		//scope=DependencyScope
		public Assignment getScopeAssignment_0() { return cScopeAssignment_0; }

		//DependencyScope
		public RuleCall getScopeDependencyScopeEnumRuleCall_0_0() { return cScopeDependencyScopeEnumRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//dependecies+=Dependency+
		public Assignment getDependeciesAssignment_2() { return cDependeciesAssignment_2; }

		//Dependency
		public RuleCall getDependeciesDependencyParserRuleCall_2_0() { return cDependeciesDependencyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class UngroupedDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UngroupedDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScopeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScopeDependencyScopeEnumRuleCall_0_0 = (RuleCall)cScopeAssignment_0.eContents().get(0);
		private final Assignment cDependencyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependencyDependencyParserRuleCall_1_0 = (RuleCall)cDependencyAssignment_1.eContents().get(0);
		
		//UngroupedDependency:
		//	scope=DependencyScope? dependency=Dependency;
		@Override public ParserRule getRule() { return rule; }

		//scope=DependencyScope? dependency=Dependency
		public Group getGroup() { return cGroup; }

		//scope=DependencyScope?
		public Assignment getScopeAssignment_0() { return cScopeAssignment_0; }

		//DependencyScope
		public RuleCall getScopeDependencyScopeEnumRuleCall_0_0() { return cScopeDependencyScopeEnumRuleCall_0_0; }

		//dependency=Dependency
		public Assignment getDependencyAssignment_1() { return cDependencyAssignment_1; }

		//Dependency
		public RuleCall getDependencyDependencyParserRuleCall_1_0() { return cDependencyDependencyParserRuleCall_1_0; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Assignment cCoordinatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoordinatesExtendedCoordinatesParserRuleCall_1_0 = (RuleCall)cCoordinatesAssignment_1.eContents().get(0);
		
		//Dependency:
		//	optional?="optional"? coordinates=ExtendedCoordinates;
		@Override public ParserRule getRule() { return rule; }

		//optional?="optional"? coordinates=ExtendedCoordinates
		public Group getGroup() { return cGroup; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }

		//coordinates=ExtendedCoordinates
		public Assignment getCoordinatesAssignment_1() { return cCoordinatesAssignment_1; }

		//ExtendedCoordinates
		public RuleCall getCoordinatesExtendedCoordinatesParserRuleCall_1_0() { return cCoordinatesExtendedCoordinatesParserRuleCall_1_0; }
	}

	public class DependencyInclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyInclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPomRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPomRefPOMImportCrossReference_1_0 = (CrossReference)cPomRefAssignment_1.eContents().get(0);
		private final RuleCall cPomRefPOMImportIDTerminalRuleCall_1_0_1 = (RuleCall)cPomRefPOMImportCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeDependencyScopeEnumRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		
		//DependencyInclusion:
		//	"include" pomRef=[POMImport] "." scope=DependencyScope;
		@Override public ParserRule getRule() { return rule; }

		//"include" pomRef=[POMImport] "." scope=DependencyScope
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//pomRef=[POMImport]
		public Assignment getPomRefAssignment_1() { return cPomRefAssignment_1; }

		//[POMImport]
		public CrossReference getPomRefPOMImportCrossReference_1_0() { return cPomRefPOMImportCrossReference_1_0; }

		//ID
		public RuleCall getPomRefPOMImportIDTerminalRuleCall_1_0_1() { return cPomRefPOMImportIDTerminalRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//scope=DependencyScope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//DependencyScope
		public RuleCall getScopeDependencyScopeEnumRuleCall_3_0() { return cScopeDependencyScopeEnumRuleCall_3_0; }
	}

	public class SCMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCM");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cScmKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cConKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cConnectionAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cConnectionSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cConnectionAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cDevKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeveloperConncetionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeveloperConncetionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cDeveloperConncetionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cUrlKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUrlAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cUrlAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cTagKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTagAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTagSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cTagAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//SCM:
		//	"scm" "{" ("con" connection=STRING)? & "dev" developerConncetion=STRING & ("url" url=STRING)? & ("tag" tag=STRING)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"scm" "{" ("con" connection=STRING)? & "dev" developerConncetion=STRING & ("url" url=STRING)? & ("tag" tag=STRING)? "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"scm" "{" ("con" connection=STRING)?
		public Group getGroup_0() { return cGroup_0; }

		//"scm"
		public Keyword getScmKeyword_0_0() { return cScmKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//("con" connection=STRING)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"con"
		public Keyword getConKeyword_0_2_0() { return cConKeyword_0_2_0; }

		//connection=STRING
		public Assignment getConnectionAssignment_0_2_1() { return cConnectionAssignment_0_2_1; }

		//STRING
		public RuleCall getConnectionSTRINGTerminalRuleCall_0_2_1_0() { return cConnectionSTRINGTerminalRuleCall_0_2_1_0; }

		//"dev" developerConncetion=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"dev"
		public Keyword getDevKeyword_1_0() { return cDevKeyword_1_0; }

		//developerConncetion=STRING
		public Assignment getDeveloperConncetionAssignment_1_1() { return cDeveloperConncetionAssignment_1_1; }

		//STRING
		public RuleCall getDeveloperConncetionSTRINGTerminalRuleCall_1_1_0() { return cDeveloperConncetionSTRINGTerminalRuleCall_1_1_0; }

		//("url" url=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"url"
		public Keyword getUrlKeyword_2_0() { return cUrlKeyword_2_0; }

		//url=STRING
		public Assignment getUrlAssignment_2_1() { return cUrlAssignment_2_1; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_1_0() { return cUrlSTRINGTerminalRuleCall_2_1_0; }

		//("tag" tag=STRING)? "}"
		public Group getGroup_3() { return cGroup_3; }

		//("tag" tag=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"tag"
		public Keyword getTagKeyword_3_0_0() { return cTagKeyword_3_0_0; }

		//tag=STRING
		public Assignment getTagAssignment_3_0_1() { return cTagAssignment_3_0_1; }

		//STRING
		public RuleCall getTagSTRINGTerminalRuleCall_3_0_1_0() { return cTagSTRINGTerminalRuleCall_3_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1() { return cRightCurlyBracketKeyword_3_1; }
	}

	public class PluginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plugin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPluginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCoordinatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoordinatesCoordinatesParserRuleCall_1_0 = (RuleCall)cCoordinatesAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cConfigKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cConfigurationAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cConfigurationPluginConfigurationParserRuleCall_3_0_2_0 = (RuleCall)cConfigurationAssignment_3_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Assignment cExecutionsAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cExecutionsPluginExecutionParserRuleCall_3_1_0 = (RuleCall)cExecutionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Plugin:
		//	"plugin" coordinates=Coordinates "{" (("config" "{" configuration=PluginConfiguration "}")? &
		//	executions+=PluginExecution*) //TODO add dependencies and extensions!
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"plugin" coordinates=Coordinates "{" (("config" "{" configuration=PluginConfiguration "}")? &
		//executions+=PluginExecution*) //TODO add dependencies and extensions!
		//"}"
		public Group getGroup() { return cGroup; }

		//"plugin"
		public Keyword getPluginKeyword_0() { return cPluginKeyword_0; }

		//coordinates=Coordinates
		public Assignment getCoordinatesAssignment_1() { return cCoordinatesAssignment_1; }

		//Coordinates
		public RuleCall getCoordinatesCoordinatesParserRuleCall_1_0() { return cCoordinatesCoordinatesParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("config" "{" configuration=PluginConfiguration "}")? & executions+=PluginExecution*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("config" "{" configuration=PluginConfiguration "}")?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"config"
		public Keyword getConfigKeyword_3_0_0() { return cConfigKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_1() { return cLeftCurlyBracketKeyword_3_0_1; }

		//configuration=PluginConfiguration
		public Assignment getConfigurationAssignment_3_0_2() { return cConfigurationAssignment_3_0_2; }

		//PluginConfiguration
		public RuleCall getConfigurationPluginConfigurationParserRuleCall_3_0_2_0() { return cConfigurationPluginConfigurationParserRuleCall_3_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_3() { return cRightCurlyBracketKeyword_3_0_3; }

		//executions+=PluginExecution*
		public Assignment getExecutionsAssignment_3_1() { return cExecutionsAssignment_3_1; }

		//PluginExecution
		public RuleCall getExecutionsPluginExecutionParserRuleCall_3_1_0() { return cExecutionsPluginExecutionParserRuleCall_3_1_0; }

		////TODO add dependencies and extensions!
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PluginConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfiguration");
		private final Assignment cConfigurationItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConfigurationItemsPluginConfigurationItemParserRuleCall_0 = (RuleCall)cConfigurationItemsAssignment.eContents().get(0);
		
		//PluginConfiguration:
		//	configurationItems+=PluginConfigurationItem+;
		@Override public ParserRule getRule() { return rule; }

		//configurationItems+=PluginConfigurationItem+
		public Assignment getConfigurationItemsAssignment() { return cConfigurationItemsAssignment; }

		//PluginConfigurationItem
		public RuleCall getConfigurationItemsPluginConfigurationItemParserRuleCall_0() { return cConfigurationItemsPluginConfigurationItemParserRuleCall_0; }
	}

	public class PluginConfigurationItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfigurationItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPluginConfigurationParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPluginConfigurationParameterListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPluginConfigurationParameterMapParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPluginConfigurationParameterPropertiesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PluginConfigurationItem:
		//	PluginConfigurationParameter | PluginConfigurationParameterList | PluginConfigurationParameterMap |
		//	PluginConfigurationParameterProperties;
		@Override public ParserRule getRule() { return rule; }

		//PluginConfigurationParameter | PluginConfigurationParameterList | PluginConfigurationParameterMap |
		//PluginConfigurationParameterProperties
		public Alternatives getAlternatives() { return cAlternatives; }

		//PluginConfigurationParameter
		public RuleCall getPluginConfigurationParameterParserRuleCall_0() { return cPluginConfigurationParameterParserRuleCall_0; }

		//PluginConfigurationParameterList
		public RuleCall getPluginConfigurationParameterListParserRuleCall_1() { return cPluginConfigurationParameterListParserRuleCall_1; }

		//PluginConfigurationParameterMap
		public RuleCall getPluginConfigurationParameterMapParserRuleCall_2() { return cPluginConfigurationParameterMapParserRuleCall_2; }

		//PluginConfigurationParameterProperties
		public RuleCall getPluginConfigurationParameterPropertiesParserRuleCall_3() { return cPluginConfigurationParameterPropertiesParserRuleCall_3; }
	}

	public class PluginConfigurationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfigurationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cChildrenPluginConfigurationItemParserRuleCall_1_1_1_0 = (RuleCall)cChildrenAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//PluginConfigurationParameter:
		//	key=ID (value=STRING | "{" children+=PluginConfigurationItem+ "}")?;
		@Override public ParserRule getRule() { return rule; }

		//key=ID (value=STRING | "{" children+=PluginConfigurationItem+ "}")?
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//(value=STRING | "{" children+=PluginConfigurationItem+ "}")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//"{" children+=PluginConfigurationItem+ "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//children+=PluginConfigurationItem+
		public Assignment getChildrenAssignment_1_1_1() { return cChildrenAssignment_1_1_1; }

		//PluginConfigurationItem
		public RuleCall getChildrenPluginConfigurationItemParserRuleCall_1_1_1_0() { return cChildrenPluginConfigurationItemParserRuleCall_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class PluginConfigurationParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfigurationParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PluginConfigurationParameterList:
		//	key=ID "[" values+=STRING ("," values+=STRING)* "]";
		@Override public ParserRule getRule() { return rule; }

		//key=ID "[" values+=STRING ("," values+=STRING)* "]"
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//values+=STRING
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_0() { return cValuesSTRINGTerminalRuleCall_2_0; }

		//("," values+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=STRING
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_1_0() { return cValuesSTRINGTerminalRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class PluginConfigurationParameterMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfigurationParameterMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntriesPluginConfigurationParameterMapEntryParserRuleCall_2_0 = (RuleCall)cEntriesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PluginConfigurationParameterMap:
		//	key=ID "{" entries+=PluginConfigurationParameterMapEntry+ "}";
		@Override public ParserRule getRule() { return rule; }

		//key=ID "{" entries+=PluginConfigurationParameterMapEntry+ "}"
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//entries+=PluginConfigurationParameterMapEntry+
		public Assignment getEntriesAssignment_2() { return cEntriesAssignment_2; }

		//PluginConfigurationParameterMapEntry
		public RuleCall getEntriesPluginConfigurationParameterMapEntryParserRuleCall_2_0() { return cEntriesPluginConfigurationParameterMapEntryParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PluginConfigurationParameterMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfigurationParameterMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PluginConfigurationParameterMapEntry:
		//	key=ID "->" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//key=ID "->" value=STRING
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class PluginConfigurationParameterPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfigurationParameterProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntriesPluginConfigurationParameterPropertyEntryParserRuleCall_2_0 = (RuleCall)cEntriesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PluginConfigurationParameterProperties:
		//	key=ID "{" entries+=PluginConfigurationParameterPropertyEntry+ "}";
		@Override public ParserRule getRule() { return rule; }

		//key=ID "{" entries+=PluginConfigurationParameterPropertyEntry+ "}"
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//entries+=PluginConfigurationParameterPropertyEntry+
		public Assignment getEntriesAssignment_2() { return cEntriesAssignment_2; }

		//PluginConfigurationParameterPropertyEntry
		public RuleCall getEntriesPluginConfigurationParameterPropertyEntryParserRuleCall_2_0() { return cEntriesPluginConfigurationParameterPropertyEntryParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PluginConfigurationParameterPropertyEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginConfigurationParameterPropertyEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PluginConfigurationParameterPropertyEntry:
		//	key=ID "=" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//key=ID "=" value=STRING
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class PluginExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIdAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cIdIDAndDashParserRuleCall_1_0_0_0 = (RuleCall)cIdAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cInKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cPhaseAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cPhasePhaseEnumRuleCall_1_0_1_1_0 = (RuleCall)cPhaseAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cWithGoalsKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cGoalsAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cGoalsIDAndDashParserRuleCall_1_0_3_0 = (RuleCall)cGoalsAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Keyword cCommaKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Assignment cGoalsAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cGoalsIDAndDashParserRuleCall_1_0_4_1_0 = (RuleCall)cGoalsAssignment_1_0_4_1.eContents().get(0);
		private final Group cGroup_1_0_5 = (Group)cGroup_1_0.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_1_0_5_0 = (Keyword)cGroup_1_0_5.eContents().get(0);
		private final Assignment cConfigurationAssignment_1_0_5_1 = (Assignment)cGroup_1_0_5.eContents().get(1);
		private final RuleCall cConfigurationPluginConfigurationParserRuleCall_1_0_5_1_0 = (RuleCall)cConfigurationAssignment_1_0_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_5_2 = (Keyword)cGroup_1_0_5.eContents().get(2);
		private final Assignment cDefaultAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_1_0 = (Keyword)cDefaultAssignment_1_1.eContents().get(0);
		
		//PluginExecution:
		//	"exec" (id=IDAndDash? ("in" phase=Phase)? "with goals" goals+=IDAndDash ("," goals+=IDAndDash)* ("{"
		//	configuration=PluginConfiguration "}")? | default?="default");
		@Override public ParserRule getRule() { return rule; }

		//"exec" (id=IDAndDash? ("in" phase=Phase)? "with goals" goals+=IDAndDash ("," goals+=IDAndDash)* ("{"
		//configuration=PluginConfiguration "}")? | default?="default")
		public Group getGroup() { return cGroup; }

		//"exec"
		public Keyword getExecKeyword_0() { return cExecKeyword_0; }

		//id=IDAndDash? ("in" phase=Phase)? "with goals" goals+=IDAndDash ("," goals+=IDAndDash)* ("{"
		//configuration=PluginConfiguration "}")? | default?="default"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//id=IDAndDash? ("in" phase=Phase)? "with goals" goals+=IDAndDash ("," goals+=IDAndDash)* ("{"
		//configuration=PluginConfiguration "}")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//id=IDAndDash?
		public Assignment getIdAssignment_1_0_0() { return cIdAssignment_1_0_0; }

		//IDAndDash
		public RuleCall getIdIDAndDashParserRuleCall_1_0_0_0() { return cIdIDAndDashParserRuleCall_1_0_0_0; }

		//("in" phase=Phase)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"in"
		public Keyword getInKeyword_1_0_1_0() { return cInKeyword_1_0_1_0; }

		//phase=Phase
		public Assignment getPhaseAssignment_1_0_1_1() { return cPhaseAssignment_1_0_1_1; }

		//Phase
		public RuleCall getPhasePhaseEnumRuleCall_1_0_1_1_0() { return cPhasePhaseEnumRuleCall_1_0_1_1_0; }

		//"with goals"
		public Keyword getWithGoalsKeyword_1_0_2() { return cWithGoalsKeyword_1_0_2; }

		//goals+=IDAndDash
		public Assignment getGoalsAssignment_1_0_3() { return cGoalsAssignment_1_0_3; }

		//IDAndDash
		public RuleCall getGoalsIDAndDashParserRuleCall_1_0_3_0() { return cGoalsIDAndDashParserRuleCall_1_0_3_0; }

		//("," goals+=IDAndDash)*
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//","
		public Keyword getCommaKeyword_1_0_4_0() { return cCommaKeyword_1_0_4_0; }

		//goals+=IDAndDash
		public Assignment getGoalsAssignment_1_0_4_1() { return cGoalsAssignment_1_0_4_1; }

		//IDAndDash
		public RuleCall getGoalsIDAndDashParserRuleCall_1_0_4_1_0() { return cGoalsIDAndDashParserRuleCall_1_0_4_1_0; }

		//("{" configuration=PluginConfiguration "}")?
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_5_0() { return cLeftCurlyBracketKeyword_1_0_5_0; }

		//configuration=PluginConfiguration
		public Assignment getConfigurationAssignment_1_0_5_1() { return cConfigurationAssignment_1_0_5_1; }

		//PluginConfiguration
		public RuleCall getConfigurationPluginConfigurationParserRuleCall_1_0_5_1_0() { return cConfigurationPluginConfigurationParserRuleCall_1_0_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_5_2() { return cRightCurlyBracketKeyword_1_0_5_2; }

		//default?="default"
		public Assignment getDefaultAssignment_1_1() { return cDefaultAssignment_1_1; }

		//"default"
		public Keyword getDefaultDefaultKeyword_1_1_0() { return cDefaultDefaultKeyword_1_1_0; }
	}

	public class PluginInclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluginInclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPomRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPomRefPOMImportCrossReference_1_0 = (CrossReference)cPomRefAssignment_1.eContents().get(0);
		private final RuleCall cPomRefPOMImportIDTerminalRuleCall_1_0_1 = (RuleCall)cPomRefPOMImportCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPluginCoordinatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPluginCoordinatesCoordinatesParserRuleCall_3_0 = (RuleCall)cPluginCoordinatesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cExecutionIdAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cExecutionIdIDAndDashParserRuleCall_4_1_0_0 = (RuleCall)cExecutionIdAssignment_4_1_0.eContents().get(0);
		private final Assignment cConfigAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final Keyword cConfigConfigKeyword_4_1_1_0 = (Keyword)cConfigAssignment_4_1_1.eContents().get(0);
		
		//PluginInclusion:
		//	"include" pomRef=[POMImport] "." pluginCoordinates=Coordinates ("." (executionId=IDAndDash | config?="config"))?;
		@Override public ParserRule getRule() { return rule; }

		//"include" pomRef=[POMImport] "." pluginCoordinates=Coordinates ("." (executionId=IDAndDash | config?="config"))?
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//pomRef=[POMImport]
		public Assignment getPomRefAssignment_1() { return cPomRefAssignment_1; }

		//[POMImport]
		public CrossReference getPomRefPOMImportCrossReference_1_0() { return cPomRefPOMImportCrossReference_1_0; }

		//ID
		public RuleCall getPomRefPOMImportIDTerminalRuleCall_1_0_1() { return cPomRefPOMImportIDTerminalRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//pluginCoordinates=Coordinates
		public Assignment getPluginCoordinatesAssignment_3() { return cPluginCoordinatesAssignment_3; }

		//Coordinates
		public RuleCall getPluginCoordinatesCoordinatesParserRuleCall_3_0() { return cPluginCoordinatesCoordinatesParserRuleCall_3_0; }

		//("." (executionId=IDAndDash | config?="config"))?
		public Group getGroup_4() { return cGroup_4; }

		//"."
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }

		//executionId=IDAndDash | config?="config"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//executionId=IDAndDash
		public Assignment getExecutionIdAssignment_4_1_0() { return cExecutionIdAssignment_4_1_0; }

		//IDAndDash
		public RuleCall getExecutionIdIDAndDashParserRuleCall_4_1_0_0() { return cExecutionIdIDAndDashParserRuleCall_4_1_0_0; }

		//config?="config"
		public Assignment getConfigAssignment_4_1_1() { return cConfigAssignment_4_1_1; }

		//"config"
		public Keyword getConfigConfigKeyword_4_1_1_0() { return cConfigConfigKeyword_4_1_1_0; }
	}

	public class BuildStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPluginParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPluginInclusionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BuildStep:
		//	Plugin | PluginInclusion;
		@Override public ParserRule getRule() { return rule; }

		//Plugin | PluginInclusion
		public Alternatives getAlternatives() { return cAlternatives; }

		//Plugin
		public RuleCall getPluginParserRuleCall_0() { return cPluginParserRuleCall_0; }

		//PluginInclusion
		public RuleCall getPluginInclusionParserRuleCall_1() { return cPluginInclusionParserRuleCall_1; }
	}

	public class CoordinatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Coordinates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGroupIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGroupIdIDAndSpecialCharactersParserRuleCall_0_0 = (RuleCall)cGroupIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArtifactIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArtifactIdIDAndSpecialCharactersParserRuleCall_2_0 = (RuleCall)cArtifactIdAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionVersionParserRuleCall_4_0 = (RuleCall)cVersionAssignment_4.eContents().get(0);
		
		//Coordinates:
		//	groupId=IDAndSpecialCharacters ":" artifactId=IDAndSpecialCharacters ":" version=Version;
		@Override public ParserRule getRule() { return rule; }

		//groupId=IDAndSpecialCharacters ":" artifactId=IDAndSpecialCharacters ":" version=Version
		public Group getGroup() { return cGroup; }

		//groupId=IDAndSpecialCharacters
		public Assignment getGroupIdAssignment_0() { return cGroupIdAssignment_0; }

		//IDAndSpecialCharacters
		public RuleCall getGroupIdIDAndSpecialCharactersParserRuleCall_0_0() { return cGroupIdIDAndSpecialCharactersParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//artifactId=IDAndSpecialCharacters
		public Assignment getArtifactIdAssignment_2() { return cArtifactIdAssignment_2; }

		//IDAndSpecialCharacters
		public RuleCall getArtifactIdIDAndSpecialCharactersParserRuleCall_2_0() { return cArtifactIdIDAndSpecialCharactersParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//version=Version
		public Assignment getVersionAssignment_4() { return cVersionAssignment_4; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_4_0() { return cVersionVersionParserRuleCall_4_0; }
	}

	public class ExtendedCoordinatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendedCoordinates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGroupIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGroupIdIDAndDotParserRuleCall_0_0 = (RuleCall)cGroupIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArtifactIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArtifactIdIDAndDashParserRuleCall_2_0 = (RuleCall)cArtifactIdAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionVersionParserRuleCall_4_0 = (RuleCall)cVersionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeIDAndDashParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cColonKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cClassifierAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cClassifierClassifierParserRuleCall_5_2_1_0 = (RuleCall)cClassifierAssignment_5_2_1.eContents().get(0);
		
		//ExtendedCoordinates:
		//	groupId=IDAndDot ":" artifactId=IDAndDash ":" version=Version (":" type=IDAndDash (":" classifier=Classifier)?)?;
		@Override public ParserRule getRule() { return rule; }

		//groupId=IDAndDot ":" artifactId=IDAndDash ":" version=Version (":" type=IDAndDash (":" classifier=Classifier)?)?
		public Group getGroup() { return cGroup; }

		//groupId=IDAndDot
		public Assignment getGroupIdAssignment_0() { return cGroupIdAssignment_0; }

		//IDAndDot
		public RuleCall getGroupIdIDAndDotParserRuleCall_0_0() { return cGroupIdIDAndDotParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//artifactId=IDAndDash
		public Assignment getArtifactIdAssignment_2() { return cArtifactIdAssignment_2; }

		//IDAndDash
		public RuleCall getArtifactIdIDAndDashParserRuleCall_2_0() { return cArtifactIdIDAndDashParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//version=Version
		public Assignment getVersionAssignment_4() { return cVersionAssignment_4; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_4_0() { return cVersionVersionParserRuleCall_4_0; }

		//(":" type=IDAndDash (":" classifier=Classifier)?)?
		public Group getGroup_5() { return cGroup_5; }

		//":"
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }

		//type=IDAndDash
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//IDAndDash
		public RuleCall getTypeIDAndDashParserRuleCall_5_1_0() { return cTypeIDAndDashParserRuleCall_5_1_0; }

		//(":" classifier=Classifier)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//":"
		public Keyword getColonKeyword_5_2_0() { return cColonKeyword_5_2_0; }

		//classifier=Classifier
		public Assignment getClassifierAssignment_5_2_1() { return cClassifierAssignment_5_2_1; }

		//Classifier
		public RuleCall getClassifierClassifierParserRuleCall_5_2_1_0() { return cClassifierClassifierParserRuleCall_5_2_1_0; }
	}

	public class POMImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POMImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCoordinatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoordinatesCoordinatesParserRuleCall_1_0 = (RuleCall)cCoordinatesAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//POMImport:
		//	"import" coordinates=Coordinates "as" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"import" coordinates=Coordinates "as" name=ID
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//coordinates=Coordinates
		public Assignment getCoordinatesAssignment_1() { return cCoordinatesAssignment_1; }

		//Coordinates
		public RuleCall getCoordinatesCoordinatesParserRuleCall_1_0() { return cCoordinatesCoordinatesParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	
	
	public class DependencyScopeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOMPILEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOMPILECompileKeyword_0_0 = (Keyword)cCOMPILEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPROVIDEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPROVIDEDProvidedKeyword_1_0 = (Keyword)cPROVIDEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRUNTIMEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRUNTIMERuntimeKeyword_2_0 = (Keyword)cRUNTIMEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSYSTEMEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSYSTEMSystemKeyword_3_0 = (Keyword)cSYSTEMEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTESTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTESTTestKeyword_4_0 = (Keyword)cTESTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIMPORTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIMPORTImportKeyword_5_0 = (Keyword)cIMPORTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum DependencyScope:
		//	COMPILE="compile" | PROVIDED="provided" | RUNTIME="runtime" | SYSTEM="system" | TEST="test" | IMPORT="import";
		public EnumRule getRule() { return rule; }

		//COMPILE="compile" | PROVIDED="provided" | RUNTIME="runtime" | SYSTEM="system" | TEST="test" | IMPORT="import"
		public Alternatives getAlternatives() { return cAlternatives; }

		//COMPILE="compile"
		public EnumLiteralDeclaration getCOMPILEEnumLiteralDeclaration_0() { return cCOMPILEEnumLiteralDeclaration_0; }

		//"compile"
		public Keyword getCOMPILECompileKeyword_0_0() { return cCOMPILECompileKeyword_0_0; }

		//PROVIDED="provided"
		public EnumLiteralDeclaration getPROVIDEDEnumLiteralDeclaration_1() { return cPROVIDEDEnumLiteralDeclaration_1; }

		//"provided"
		public Keyword getPROVIDEDProvidedKeyword_1_0() { return cPROVIDEDProvidedKeyword_1_0; }

		//RUNTIME="runtime"
		public EnumLiteralDeclaration getRUNTIMEEnumLiteralDeclaration_2() { return cRUNTIMEEnumLiteralDeclaration_2; }

		//"runtime"
		public Keyword getRUNTIMERuntimeKeyword_2_0() { return cRUNTIMERuntimeKeyword_2_0; }

		//SYSTEM="system"
		public EnumLiteralDeclaration getSYSTEMEnumLiteralDeclaration_3() { return cSYSTEMEnumLiteralDeclaration_3; }

		//"system"
		public Keyword getSYSTEMSystemKeyword_3_0() { return cSYSTEMSystemKeyword_3_0; }

		//TEST="test"
		public EnumLiteralDeclaration getTESTEnumLiteralDeclaration_4() { return cTESTEnumLiteralDeclaration_4; }

		//"test"
		public Keyword getTESTTestKeyword_4_0() { return cTESTTestKeyword_4_0; }

		//IMPORT="import"
		public EnumLiteralDeclaration getIMPORTEnumLiteralDeclaration_5() { return cIMPORTEnumLiteralDeclaration_5; }

		//"import"
		public Keyword getIMPORTImportKeyword_5_0() { return cIMPORTImportKeyword_5_0; }
	}

	public class PhaseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Phase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDefaultKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRE_CLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRE_CLEANPreCleanKeyword_1_0 = (Keyword)cPRE_CLEANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCLEANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCLEANCleanKeyword_2_0 = (Keyword)cCLEANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPOST_CLEANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPOST_CLEANPostCleanKeyword_3_0 = (Keyword)cPOST_CLEANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVALIDATEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVALIDATEValidateKeyword_4_0 = (Keyword)cVALIDATEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINITIALIZEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINITIALIZEInitializeKeyword_5_0 = (Keyword)cINITIALIZEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGENERATE_SOURCESEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGENERATE_SOURCESGenerateSourcesKeyword_6_0 = (Keyword)cGENERATE_SOURCESEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESS_SOURCESEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPROCESS_SOURCESProcessSourcesKeyword_7_0 = (Keyword)cPROCESS_SOURCESEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cGENERATE_RESOURCESEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cGENERATE_RESOURCESGenerateResourcesKeyword_8_0 = (Keyword)cGENERATE_RESOURCESEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESS_RESOURCESEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPROCESS_RESOURCESProcessResourcesKeyword_9_0 = (Keyword)cPROCESS_RESOURCESEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPILEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cCOMPILECompileKeyword_10_0 = (Keyword)cCOMPILEEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESS_CLASSESEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cPROCESS_CLASSESProcessClassesKeyword_11_0 = (Keyword)cPROCESS_CLASSESEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cGENERATE_TEST_SOURCESEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cGENERATE_TEST_SOURCESGenerateTestSourcesKeyword_12_0 = (Keyword)cGENERATE_TEST_SOURCESEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESS_TEST_SOURCESEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cPROCESS_TEST_SOURCESProcessTestSourcesKeyword_13_0 = (Keyword)cPROCESS_TEST_SOURCESEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cGENERATE_TEST_RESOURCESEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cGENERATE_TEST_RESOURCESGenerateTestResourcesKeyword_14_0 = (Keyword)cGENERATE_TEST_RESOURCESEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESS_TEST_RESOURCESEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cPROCESS_TEST_RESOURCESProcessTestResourcesKeyword_15_0 = (Keyword)cPROCESS_TEST_RESOURCESEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cTEST_COMPILEEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cTEST_COMPILETestCompileKeyword_16_0 = (Keyword)cTEST_COMPILEEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESS_TEST_CLASSESEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cPROCESS_TEST_CLASSESProcessTestClassesKeyword_17_0 = (Keyword)cPROCESS_TEST_CLASSESEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cTESTEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cTESTTestKeyword_18_0 = (Keyword)cTESTEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cPREPARE_PACKAGEEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cPREPARE_PACKAGEPreparePackageKeyword_19_0 = (Keyword)cPREPARE_PACKAGEEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cPACKAGEPackageKeyword_20_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cPRE_INTEGRATION_TESTEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cPRE_INTEGRATION_TESTPreIntegrationTestKeyword_21_0 = (Keyword)cPRE_INTEGRATION_TESTEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGRATION_TESTEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cINTEGRATION_TESTIntegrationTestKeyword_22_0 = (Keyword)cINTEGRATION_TESTEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cPOST_INTEGRATION_TESTEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cPOST_INTEGRATION_TESTPostIntegrationTestKeyword_23_0 = (Keyword)cPOST_INTEGRATION_TESTEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cVERIFYEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cVERIFYVerifyKeyword_24_0 = (Keyword)cVERIFYEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cINSTALLEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cINSTALLInstallKeyword_25_0 = (Keyword)cINSTALLEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cDEPLOYEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cDEPLOYDeployKeyword_26_0 = (Keyword)cDEPLOYEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cPRE_SITEEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cPRE_SITEPreSiteKeyword_27_0 = (Keyword)cPRE_SITEEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cSITEEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cSITESiteKeyword_28_0 = (Keyword)cSITEEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cPOST_SITEEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cPOST_SITEPostSiteKeyword_29_0 = (Keyword)cPOST_SITEEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cSITE_DEPLOYEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cSITE_DEPLOYSiteDeployKeyword_30_0 = (Keyword)cSITE_DEPLOYEnumLiteralDeclaration_30.eContents().get(0);
		
		//enum Phase:
		//	DEFAULT="default" | PRE_CLEAN="pre-clean" | CLEAN="clean" | POST_CLEAN="post-clean" | VALIDATE="validate" |
		//	INITIALIZE="initialize" | GENERATE_SOURCES="generate-sources" | PROCESS_SOURCES="process-sources" |
		//	GENERATE_RESOURCES="generate-resources" | PROCESS_RESOURCES="process-resources" | COMPILE="compile" |
		//	PROCESS_CLASSES="process-classes" | GENERATE_TEST_SOURCES="generate-test-sources" |
		//	PROCESS_TEST_SOURCES="process-test-sources" | GENERATE_TEST_RESOURCES="generate-test-resources" |
		//	PROCESS_TEST_RESOURCES="process-test-resources" | TEST_COMPILE="test-compile" |
		//	PROCESS_TEST_CLASSES="process-test-classes" | TEST="test" | PREPARE_PACKAGE="prepare-package" | PACKAGE="package" |
		//	PRE_INTEGRATION_TEST="pre-integration-test" | INTEGRATION_TEST="integration-test" |
		//	POST_INTEGRATION_TEST="post-integration-test" | VERIFY="verify" | INSTALL="install" | DEPLOY="deploy" |
		//	PRE_SITE="pre-site" | SITE="site" | POST_SITE="post-site" | SITE_DEPLOY="site-deploy";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default" | PRE_CLEAN="pre-clean" | CLEAN="clean" | POST_CLEAN="post-clean" | VALIDATE="validate" |
		//INITIALIZE="initialize" | GENERATE_SOURCES="generate-sources" | PROCESS_SOURCES="process-sources" |
		//GENERATE_RESOURCES="generate-resources" | PROCESS_RESOURCES="process-resources" | COMPILE="compile" |
		//PROCESS_CLASSES="process-classes" | GENERATE_TEST_SOURCES="generate-test-sources" |
		//PROCESS_TEST_SOURCES="process-test-sources" | GENERATE_TEST_RESOURCES="generate-test-resources" |
		//PROCESS_TEST_RESOURCES="process-test-resources" | TEST_COMPILE="test-compile" |
		//PROCESS_TEST_CLASSES="process-test-classes" | TEST="test" | PREPARE_PACKAGE="prepare-package" | PACKAGE="package" |
		//PRE_INTEGRATION_TEST="pre-integration-test" | INTEGRATION_TEST="integration-test" |
		//POST_INTEGRATION_TEST="post-integration-test" | VERIFY="verify" | INSTALL="install" | DEPLOY="deploy" |
		//PRE_SITE="pre-site" | SITE="site" | POST_SITE="post-site" | SITE_DEPLOY="site-deploy"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0_0() { return cDEFAULTDefaultKeyword_0_0; }

		//PRE_CLEAN="pre-clean"
		public EnumLiteralDeclaration getPRE_CLEANEnumLiteralDeclaration_1() { return cPRE_CLEANEnumLiteralDeclaration_1; }

		//"pre-clean"
		public Keyword getPRE_CLEANPreCleanKeyword_1_0() { return cPRE_CLEANPreCleanKeyword_1_0; }

		//CLEAN="clean"
		public EnumLiteralDeclaration getCLEANEnumLiteralDeclaration_2() { return cCLEANEnumLiteralDeclaration_2; }

		//"clean"
		public Keyword getCLEANCleanKeyword_2_0() { return cCLEANCleanKeyword_2_0; }

		//POST_CLEAN="post-clean"
		public EnumLiteralDeclaration getPOST_CLEANEnumLiteralDeclaration_3() { return cPOST_CLEANEnumLiteralDeclaration_3; }

		//"post-clean"
		public Keyword getPOST_CLEANPostCleanKeyword_3_0() { return cPOST_CLEANPostCleanKeyword_3_0; }

		//VALIDATE="validate"
		public EnumLiteralDeclaration getVALIDATEEnumLiteralDeclaration_4() { return cVALIDATEEnumLiteralDeclaration_4; }

		//"validate"
		public Keyword getVALIDATEValidateKeyword_4_0() { return cVALIDATEValidateKeyword_4_0; }

		//INITIALIZE="initialize"
		public EnumLiteralDeclaration getINITIALIZEEnumLiteralDeclaration_5() { return cINITIALIZEEnumLiteralDeclaration_5; }

		//"initialize"
		public Keyword getINITIALIZEInitializeKeyword_5_0() { return cINITIALIZEInitializeKeyword_5_0; }

		//GENERATE_SOURCES="generate-sources"
		public EnumLiteralDeclaration getGENERATE_SOURCESEnumLiteralDeclaration_6() { return cGENERATE_SOURCESEnumLiteralDeclaration_6; }

		//"generate-sources"
		public Keyword getGENERATE_SOURCESGenerateSourcesKeyword_6_0() { return cGENERATE_SOURCESGenerateSourcesKeyword_6_0; }

		//PROCESS_SOURCES="process-sources"
		public EnumLiteralDeclaration getPROCESS_SOURCESEnumLiteralDeclaration_7() { return cPROCESS_SOURCESEnumLiteralDeclaration_7; }

		//"process-sources"
		public Keyword getPROCESS_SOURCESProcessSourcesKeyword_7_0() { return cPROCESS_SOURCESProcessSourcesKeyword_7_0; }

		//GENERATE_RESOURCES="generate-resources"
		public EnumLiteralDeclaration getGENERATE_RESOURCESEnumLiteralDeclaration_8() { return cGENERATE_RESOURCESEnumLiteralDeclaration_8; }

		//"generate-resources"
		public Keyword getGENERATE_RESOURCESGenerateResourcesKeyword_8_0() { return cGENERATE_RESOURCESGenerateResourcesKeyword_8_0; }

		//PROCESS_RESOURCES="process-resources"
		public EnumLiteralDeclaration getPROCESS_RESOURCESEnumLiteralDeclaration_9() { return cPROCESS_RESOURCESEnumLiteralDeclaration_9; }

		//"process-resources"
		public Keyword getPROCESS_RESOURCESProcessResourcesKeyword_9_0() { return cPROCESS_RESOURCESProcessResourcesKeyword_9_0; }

		//COMPILE="compile"
		public EnumLiteralDeclaration getCOMPILEEnumLiteralDeclaration_10() { return cCOMPILEEnumLiteralDeclaration_10; }

		//"compile"
		public Keyword getCOMPILECompileKeyword_10_0() { return cCOMPILECompileKeyword_10_0; }

		//PROCESS_CLASSES="process-classes"
		public EnumLiteralDeclaration getPROCESS_CLASSESEnumLiteralDeclaration_11() { return cPROCESS_CLASSESEnumLiteralDeclaration_11; }

		//"process-classes"
		public Keyword getPROCESS_CLASSESProcessClassesKeyword_11_0() { return cPROCESS_CLASSESProcessClassesKeyword_11_0; }

		//GENERATE_TEST_SOURCES="generate-test-sources"
		public EnumLiteralDeclaration getGENERATE_TEST_SOURCESEnumLiteralDeclaration_12() { return cGENERATE_TEST_SOURCESEnumLiteralDeclaration_12; }

		//"generate-test-sources"
		public Keyword getGENERATE_TEST_SOURCESGenerateTestSourcesKeyword_12_0() { return cGENERATE_TEST_SOURCESGenerateTestSourcesKeyword_12_0; }

		//PROCESS_TEST_SOURCES="process-test-sources"
		public EnumLiteralDeclaration getPROCESS_TEST_SOURCESEnumLiteralDeclaration_13() { return cPROCESS_TEST_SOURCESEnumLiteralDeclaration_13; }

		//"process-test-sources"
		public Keyword getPROCESS_TEST_SOURCESProcessTestSourcesKeyword_13_0() { return cPROCESS_TEST_SOURCESProcessTestSourcesKeyword_13_0; }

		//GENERATE_TEST_RESOURCES="generate-test-resources"
		public EnumLiteralDeclaration getGENERATE_TEST_RESOURCESEnumLiteralDeclaration_14() { return cGENERATE_TEST_RESOURCESEnumLiteralDeclaration_14; }

		//"generate-test-resources"
		public Keyword getGENERATE_TEST_RESOURCESGenerateTestResourcesKeyword_14_0() { return cGENERATE_TEST_RESOURCESGenerateTestResourcesKeyword_14_0; }

		//PROCESS_TEST_RESOURCES="process-test-resources"
		public EnumLiteralDeclaration getPROCESS_TEST_RESOURCESEnumLiteralDeclaration_15() { return cPROCESS_TEST_RESOURCESEnumLiteralDeclaration_15; }

		//"process-test-resources"
		public Keyword getPROCESS_TEST_RESOURCESProcessTestResourcesKeyword_15_0() { return cPROCESS_TEST_RESOURCESProcessTestResourcesKeyword_15_0; }

		//TEST_COMPILE="test-compile"
		public EnumLiteralDeclaration getTEST_COMPILEEnumLiteralDeclaration_16() { return cTEST_COMPILEEnumLiteralDeclaration_16; }

		//"test-compile"
		public Keyword getTEST_COMPILETestCompileKeyword_16_0() { return cTEST_COMPILETestCompileKeyword_16_0; }

		//PROCESS_TEST_CLASSES="process-test-classes"
		public EnumLiteralDeclaration getPROCESS_TEST_CLASSESEnumLiteralDeclaration_17() { return cPROCESS_TEST_CLASSESEnumLiteralDeclaration_17; }

		//"process-test-classes"
		public Keyword getPROCESS_TEST_CLASSESProcessTestClassesKeyword_17_0() { return cPROCESS_TEST_CLASSESProcessTestClassesKeyword_17_0; }

		//TEST="test"
		public EnumLiteralDeclaration getTESTEnumLiteralDeclaration_18() { return cTESTEnumLiteralDeclaration_18; }

		//"test"
		public Keyword getTESTTestKeyword_18_0() { return cTESTTestKeyword_18_0; }

		//PREPARE_PACKAGE="prepare-package"
		public EnumLiteralDeclaration getPREPARE_PACKAGEEnumLiteralDeclaration_19() { return cPREPARE_PACKAGEEnumLiteralDeclaration_19; }

		//"prepare-package"
		public Keyword getPREPARE_PACKAGEPreparePackageKeyword_19_0() { return cPREPARE_PACKAGEPreparePackageKeyword_19_0; }

		//PACKAGE="package"
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_20() { return cPACKAGEEnumLiteralDeclaration_20; }

		//"package"
		public Keyword getPACKAGEPackageKeyword_20_0() { return cPACKAGEPackageKeyword_20_0; }

		//PRE_INTEGRATION_TEST="pre-integration-test"
		public EnumLiteralDeclaration getPRE_INTEGRATION_TESTEnumLiteralDeclaration_21() { return cPRE_INTEGRATION_TESTEnumLiteralDeclaration_21; }

		//"pre-integration-test"
		public Keyword getPRE_INTEGRATION_TESTPreIntegrationTestKeyword_21_0() { return cPRE_INTEGRATION_TESTPreIntegrationTestKeyword_21_0; }

		//INTEGRATION_TEST="integration-test"
		public EnumLiteralDeclaration getINTEGRATION_TESTEnumLiteralDeclaration_22() { return cINTEGRATION_TESTEnumLiteralDeclaration_22; }

		//"integration-test"
		public Keyword getINTEGRATION_TESTIntegrationTestKeyword_22_0() { return cINTEGRATION_TESTIntegrationTestKeyword_22_0; }

		//POST_INTEGRATION_TEST="post-integration-test"
		public EnumLiteralDeclaration getPOST_INTEGRATION_TESTEnumLiteralDeclaration_23() { return cPOST_INTEGRATION_TESTEnumLiteralDeclaration_23; }

		//"post-integration-test"
		public Keyword getPOST_INTEGRATION_TESTPostIntegrationTestKeyword_23_0() { return cPOST_INTEGRATION_TESTPostIntegrationTestKeyword_23_0; }

		//VERIFY="verify"
		public EnumLiteralDeclaration getVERIFYEnumLiteralDeclaration_24() { return cVERIFYEnumLiteralDeclaration_24; }

		//"verify"
		public Keyword getVERIFYVerifyKeyword_24_0() { return cVERIFYVerifyKeyword_24_0; }

		//INSTALL="install"
		public EnumLiteralDeclaration getINSTALLEnumLiteralDeclaration_25() { return cINSTALLEnumLiteralDeclaration_25; }

		//"install"
		public Keyword getINSTALLInstallKeyword_25_0() { return cINSTALLInstallKeyword_25_0; }

		//DEPLOY="deploy"
		public EnumLiteralDeclaration getDEPLOYEnumLiteralDeclaration_26() { return cDEPLOYEnumLiteralDeclaration_26; }

		//"deploy"
		public Keyword getDEPLOYDeployKeyword_26_0() { return cDEPLOYDeployKeyword_26_0; }

		//PRE_SITE="pre-site"
		public EnumLiteralDeclaration getPRE_SITEEnumLiteralDeclaration_27() { return cPRE_SITEEnumLiteralDeclaration_27; }

		//"pre-site"
		public Keyword getPRE_SITEPreSiteKeyword_27_0() { return cPRE_SITEPreSiteKeyword_27_0; }

		//SITE="site"
		public EnumLiteralDeclaration getSITEEnumLiteralDeclaration_28() { return cSITEEnumLiteralDeclaration_28; }

		//"site"
		public Keyword getSITESiteKeyword_28_0() { return cSITESiteKeyword_28_0; }

		//POST_SITE="post-site"
		public EnumLiteralDeclaration getPOST_SITEEnumLiteralDeclaration_29() { return cPOST_SITEEnumLiteralDeclaration_29; }

		//"post-site"
		public Keyword getPOST_SITEPostSiteKeyword_29_0() { return cPOST_SITEPostSiteKeyword_29_0; }

		//SITE_DEPLOY="site-deploy"
		public EnumLiteralDeclaration getSITE_DEPLOYEnumLiteralDeclaration_30() { return cSITE_DEPLOYEnumLiteralDeclaration_30; }

		//"site-deploy"
		public Keyword getSITE_DEPLOYSiteDeployKeyword_30_0() { return cSITE_DEPLOYSiteDeployKeyword_30_0; }
	}
	
	private final POMElements pPOM;
	private final ParentRefElements pParentRef;
	private final ModulesElements pModules;
	private final ArtifactDefinitionElements pArtifactDefinition;
	private final IDAndDotElements pIDAndDot;
	private final IDAndDashElements pIDAndDash;
	private final IDAndSpecialCharactersElements pIDAndSpecialCharacters;
	private final ClassifierElements pClassifier;
	private final NumberElements pNumber;
	private final TextElements pText;
	private final PropertyNameElements pPropertyName;
	private final IDOrPropteryRefElements pIDOrPropteryRef;
	private final IDOrKWElements pIDOrKW;
	private final VersionElements pVersion;
	private final PropertyElements pProperty;
	private final PropertyInclusionElements pPropertyInclusion;
	private final DependenciesElements pDependencies;
	private final DependencyGroupElements pDependencyGroup;
	private final UngroupedDependencyElements pUngroupedDependency;
	private final DependencyElements pDependency;
	private final DependencyInclusionElements pDependencyInclusion;
	private final SCMElements pSCM;
	private final PluginElements pPlugin;
	private final PluginConfigurationElements pPluginConfiguration;
	private final PluginConfigurationItemElements pPluginConfigurationItem;
	private final PluginConfigurationParameterElements pPluginConfigurationParameter;
	private final PluginConfigurationParameterListElements pPluginConfigurationParameterList;
	private final PluginConfigurationParameterMapElements pPluginConfigurationParameterMap;
	private final PluginConfigurationParameterMapEntryElements pPluginConfigurationParameterMapEntry;
	private final PluginConfigurationParameterPropertiesElements pPluginConfigurationParameterProperties;
	private final PluginConfigurationParameterPropertyEntryElements pPluginConfigurationParameterPropertyEntry;
	private final PluginExecutionElements pPluginExecution;
	private final PluginInclusionElements pPluginInclusion;
	private final BuildStepElements pBuildStep;
	private final CoordinatesElements pCoordinates;
	private final ExtendedCoordinatesElements pExtendedCoordinates;
	private final POMImportElements pPOMImport;
	private final TerminalRule tID;
	private final DependencyScopeElements unknownRuleDependencyScope;
	private final PhaseElements unknownRulePhase;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PomGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPOM = new POMElements();
		this.pParentRef = new ParentRefElements();
		this.pModules = new ModulesElements();
		this.pArtifactDefinition = new ArtifactDefinitionElements();
		this.pIDAndDot = new IDAndDotElements();
		this.pIDAndDash = new IDAndDashElements();
		this.pIDAndSpecialCharacters = new IDAndSpecialCharactersElements();
		this.pClassifier = new ClassifierElements();
		this.pNumber = new NumberElements();
		this.pText = new TextElements();
		this.pPropertyName = new PropertyNameElements();
		this.pIDOrPropteryRef = new IDOrPropteryRefElements();
		this.pIDOrKW = new IDOrKWElements();
		this.pVersion = new VersionElements();
		this.pProperty = new PropertyElements();
		this.pPropertyInclusion = new PropertyInclusionElements();
		this.pDependencies = new DependenciesElements();
		this.pDependencyGroup = new DependencyGroupElements();
		this.pUngroupedDependency = new UngroupedDependencyElements();
		this.pDependency = new DependencyElements();
		this.pDependencyInclusion = new DependencyInclusionElements();
		this.pSCM = new SCMElements();
		this.pPlugin = new PluginElements();
		this.pPluginConfiguration = new PluginConfigurationElements();
		this.pPluginConfigurationItem = new PluginConfigurationItemElements();
		this.pPluginConfigurationParameter = new PluginConfigurationParameterElements();
		this.pPluginConfigurationParameterList = new PluginConfigurationParameterListElements();
		this.pPluginConfigurationParameterMap = new PluginConfigurationParameterMapElements();
		this.pPluginConfigurationParameterMapEntry = new PluginConfigurationParameterMapEntryElements();
		this.pPluginConfigurationParameterProperties = new PluginConfigurationParameterPropertiesElements();
		this.pPluginConfigurationParameterPropertyEntry = new PluginConfigurationParameterPropertyEntryElements();
		this.pPluginExecution = new PluginExecutionElements();
		this.pPluginInclusion = new PluginInclusionElements();
		this.pBuildStep = new BuildStepElements();
		this.pCoordinates = new CoordinatesElements();
		this.pExtendedCoordinates = new ExtendedCoordinatesElements();
		this.pPOMImport = new POMImportElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.unknownRuleDependencyScope = new DependencyScopeElements();
		this.unknownRulePhase = new PhaseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.itemis.mpp.Pom".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//POM:
	//	imports+=POMImport* parent=ParentRef? artifactDefinition=ArtifactDefinition modules=Modules?
	//	(propertyInclusions+=PropertyInclusion* & properties+=Property* & dependencies=Dependencies? & scm=SCM?)
	//	buildSteps+=BuildStep*;
	public POMElements getPOMAccess() {
		return pPOM;
	}
	
	public ParserRule getPOMRule() {
		return getPOMAccess().getRule();
	}

	//ParentRef:
	//	"parent" coordinates=Coordinates relativePath=STRING?;
	public ParentRefElements getParentRefAccess() {
		return pParentRef;
	}
	
	public ParserRule getParentRefRule() {
		return getParentRefAccess().getRule();
	}

	//Modules:
	//	"modules" names+=STRING ("," names+=STRING)*;
	public ModulesElements getModulesAccess() {
		return pModules;
	}
	
	public ParserRule getModulesRule() {
		return getModulesAccess().getRule();
	}

	//ArtifactDefinition:
	//	{ArtifactDefinition} ("group" groupId=IDAndSpecialCharacters)? ("artifact" artifactId=IDAndSpecialCharacters)?
	//	("version" version=Version)? ("type" type=Text)? (("name" artifactName=STRING)? & ("description"
	//	description=STRING)?);
	public ArtifactDefinitionElements getArtifactDefinitionAccess() {
		return pArtifactDefinition;
	}
	
	public ParserRule getArtifactDefinitionRule() {
		return getArtifactDefinitionAccess().getRule();
	}

	//IDAndDot:
	//	IDOrPropteryRef ("." IDOrPropteryRef)*;
	public IDAndDotElements getIDAndDotAccess() {
		return pIDAndDot;
	}
	
	public ParserRule getIDAndDotRule() {
		return getIDAndDotAccess().getRule();
	}

	//IDAndDash:
	//	ID ("-" ID)*;
	public IDAndDashElements getIDAndDashAccess() {
		return pIDAndDash;
	}
	
	public ParserRule getIDAndDashRule() {
		return getIDAndDashAccess().getRule();
	}

	//IDAndSpecialCharacters:
	//	IDOrPropteryRef (("-" | "." | "_")* IDOrPropteryRef)*;
	public IDAndSpecialCharactersElements getIDAndSpecialCharactersAccess() {
		return pIDAndSpecialCharacters;
	}
	
	public ParserRule getIDAndSpecialCharactersRule() {
		return getIDAndSpecialCharactersAccess().getRule();
	}

	//Classifier:
	//	ID;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}

	//Number:
	//	INT;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Text:
	//	(ID | Number | ANY_OTHER)*;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	////  (ID | '-' | '_' | '.')*
	//PropertyName:
	//	IDAndSpecialCharacters;
	public PropertyNameElements getPropertyNameAccess() {
		return pPropertyName;
	}
	
	public ParserRule getPropertyNameRule() {
		return getPropertyNameAccess().getRule();
	}

	//IDOrPropteryRef:
	//	IDOrKW | "${" PropertyName "}";
	public IDOrPropteryRefElements getIDOrPropteryRefAccess() {
		return pIDOrPropteryRef;
	}
	
	public ParserRule getIDOrPropteryRefRule() {
		return getIDOrPropteryRefAccess().getRule();
	}

	//IDOrKW:
	//	ID | "test" | //TODO continue the list of keywords!
	//	"parent";
	public IDOrKWElements getIDOrKWAccess() {
		return pIDOrKW;
	}
	
	public ParserRule getIDOrKWRule() {
		return getIDOrKWAccess().getRule();
	}

	//Version: //  NumericVersion | IDAndSpecialCharacters
	////;
	////
	////NumericVersion:
	//	major=Number ("." minor=Number ("." incremental=Number)?)? ("-" qualifier=Text)?;
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//Property:
	//	"property" name=PropertyName "=" value=STRING;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//PropertyInclusion:
	//	"include" pomRef=[POMImport] ".properties";
	public PropertyInclusionElements getPropertyInclusionAccess() {
		return pPropertyInclusion;
	}
	
	public ParserRule getPropertyInclusionRule() {
		return getPropertyInclusionAccess().getRule();
	}

	//Dependencies:
	//	{Dependencies} "dependencies" "{" (includes+=DependencyInclusion | dependencyGroups+=DependencyGroup |
	//	ungroupedDependencies+=UngroupedDependency)+ "}";
	public DependenciesElements getDependenciesAccess() {
		return pDependencies;
	}
	
	public ParserRule getDependenciesRule() {
		return getDependenciesAccess().getRule();
	}

	//DependencyGroup:
	//	scope=DependencyScope "{" dependecies+=Dependency+ "}";
	public DependencyGroupElements getDependencyGroupAccess() {
		return pDependencyGroup;
	}
	
	public ParserRule getDependencyGroupRule() {
		return getDependencyGroupAccess().getRule();
	}

	//UngroupedDependency:
	//	scope=DependencyScope? dependency=Dependency;
	public UngroupedDependencyElements getUngroupedDependencyAccess() {
		return pUngroupedDependency;
	}
	
	public ParserRule getUngroupedDependencyRule() {
		return getUngroupedDependencyAccess().getRule();
	}

	//Dependency:
	//	optional?="optional"? coordinates=ExtendedCoordinates;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//DependencyInclusion:
	//	"include" pomRef=[POMImport] "." scope=DependencyScope;
	public DependencyInclusionElements getDependencyInclusionAccess() {
		return pDependencyInclusion;
	}
	
	public ParserRule getDependencyInclusionRule() {
		return getDependencyInclusionAccess().getRule();
	}

	//SCM:
	//	"scm" "{" ("con" connection=STRING)? & "dev" developerConncetion=STRING & ("url" url=STRING)? & ("tag" tag=STRING)?
	//	"}";
	public SCMElements getSCMAccess() {
		return pSCM;
	}
	
	public ParserRule getSCMRule() {
		return getSCMAccess().getRule();
	}

	//Plugin:
	//	"plugin" coordinates=Coordinates "{" (("config" "{" configuration=PluginConfiguration "}")? &
	//	executions+=PluginExecution*) //TODO add dependencies and extensions!
	//	"}";
	public PluginElements getPluginAccess() {
		return pPlugin;
	}
	
	public ParserRule getPluginRule() {
		return getPluginAccess().getRule();
	}

	//PluginConfiguration:
	//	configurationItems+=PluginConfigurationItem+;
	public PluginConfigurationElements getPluginConfigurationAccess() {
		return pPluginConfiguration;
	}
	
	public ParserRule getPluginConfigurationRule() {
		return getPluginConfigurationAccess().getRule();
	}

	//PluginConfigurationItem:
	//	PluginConfigurationParameter | PluginConfigurationParameterList | PluginConfigurationParameterMap |
	//	PluginConfigurationParameterProperties;
	public PluginConfigurationItemElements getPluginConfigurationItemAccess() {
		return pPluginConfigurationItem;
	}
	
	public ParserRule getPluginConfigurationItemRule() {
		return getPluginConfigurationItemAccess().getRule();
	}

	//PluginConfigurationParameter:
	//	key=ID (value=STRING | "{" children+=PluginConfigurationItem+ "}")?;
	public PluginConfigurationParameterElements getPluginConfigurationParameterAccess() {
		return pPluginConfigurationParameter;
	}
	
	public ParserRule getPluginConfigurationParameterRule() {
		return getPluginConfigurationParameterAccess().getRule();
	}

	//PluginConfigurationParameterList:
	//	key=ID "[" values+=STRING ("," values+=STRING)* "]";
	public PluginConfigurationParameterListElements getPluginConfigurationParameterListAccess() {
		return pPluginConfigurationParameterList;
	}
	
	public ParserRule getPluginConfigurationParameterListRule() {
		return getPluginConfigurationParameterListAccess().getRule();
	}

	//PluginConfigurationParameterMap:
	//	key=ID "{" entries+=PluginConfigurationParameterMapEntry+ "}";
	public PluginConfigurationParameterMapElements getPluginConfigurationParameterMapAccess() {
		return pPluginConfigurationParameterMap;
	}
	
	public ParserRule getPluginConfigurationParameterMapRule() {
		return getPluginConfigurationParameterMapAccess().getRule();
	}

	//PluginConfigurationParameterMapEntry:
	//	key=ID "->" value=STRING;
	public PluginConfigurationParameterMapEntryElements getPluginConfigurationParameterMapEntryAccess() {
		return pPluginConfigurationParameterMapEntry;
	}
	
	public ParserRule getPluginConfigurationParameterMapEntryRule() {
		return getPluginConfigurationParameterMapEntryAccess().getRule();
	}

	//PluginConfigurationParameterProperties:
	//	key=ID "{" entries+=PluginConfigurationParameterPropertyEntry+ "}";
	public PluginConfigurationParameterPropertiesElements getPluginConfigurationParameterPropertiesAccess() {
		return pPluginConfigurationParameterProperties;
	}
	
	public ParserRule getPluginConfigurationParameterPropertiesRule() {
		return getPluginConfigurationParameterPropertiesAccess().getRule();
	}

	//PluginConfigurationParameterPropertyEntry:
	//	key=ID "=" value=STRING;
	public PluginConfigurationParameterPropertyEntryElements getPluginConfigurationParameterPropertyEntryAccess() {
		return pPluginConfigurationParameterPropertyEntry;
	}
	
	public ParserRule getPluginConfigurationParameterPropertyEntryRule() {
		return getPluginConfigurationParameterPropertyEntryAccess().getRule();
	}

	//PluginExecution:
	//	"exec" (id=IDAndDash? ("in" phase=Phase)? "with goals" goals+=IDAndDash ("," goals+=IDAndDash)* ("{"
	//	configuration=PluginConfiguration "}")? | default?="default");
	public PluginExecutionElements getPluginExecutionAccess() {
		return pPluginExecution;
	}
	
	public ParserRule getPluginExecutionRule() {
		return getPluginExecutionAccess().getRule();
	}

	//PluginInclusion:
	//	"include" pomRef=[POMImport] "." pluginCoordinates=Coordinates ("." (executionId=IDAndDash | config?="config"))?;
	public PluginInclusionElements getPluginInclusionAccess() {
		return pPluginInclusion;
	}
	
	public ParserRule getPluginInclusionRule() {
		return getPluginInclusionAccess().getRule();
	}

	//BuildStep:
	//	Plugin | PluginInclusion;
	public BuildStepElements getBuildStepAccess() {
		return pBuildStep;
	}
	
	public ParserRule getBuildStepRule() {
		return getBuildStepAccess().getRule();
	}

	//Coordinates:
	//	groupId=IDAndSpecialCharacters ":" artifactId=IDAndSpecialCharacters ":" version=Version;
	public CoordinatesElements getCoordinatesAccess() {
		return pCoordinates;
	}
	
	public ParserRule getCoordinatesRule() {
		return getCoordinatesAccess().getRule();
	}

	//ExtendedCoordinates:
	//	groupId=IDAndDot ":" artifactId=IDAndDash ":" version=Version (":" type=IDAndDash (":" classifier=Classifier)?)?;
	public ExtendedCoordinatesElements getExtendedCoordinatesAccess() {
		return pExtendedCoordinates;
	}
	
	public ParserRule getExtendedCoordinatesRule() {
		return getExtendedCoordinatesAccess().getRule();
	}

	//POMImport:
	//	"import" coordinates=Coordinates "as" name=ID;
	public POMImportElements getPOMImportAccess() {
		return pPOMImport;
	}
	
	public ParserRule getPOMImportRule() {
		return getPOMImportAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//enum DependencyScope:
	//	COMPILE="compile" | PROVIDED="provided" | RUNTIME="runtime" | SYSTEM="system" | TEST="test" | IMPORT="import";
	public DependencyScopeElements getDependencyScopeAccess() {
		return unknownRuleDependencyScope;
	}
	
	public EnumRule getDependencyScopeRule() {
		return getDependencyScopeAccess().getRule();
	}

	//enum Phase:
	//	DEFAULT="default" | PRE_CLEAN="pre-clean" | CLEAN="clean" | POST_CLEAN="post-clean" | VALIDATE="validate" |
	//	INITIALIZE="initialize" | GENERATE_SOURCES="generate-sources" | PROCESS_SOURCES="process-sources" |
	//	GENERATE_RESOURCES="generate-resources" | PROCESS_RESOURCES="process-resources" | COMPILE="compile" |
	//	PROCESS_CLASSES="process-classes" | GENERATE_TEST_SOURCES="generate-test-sources" |
	//	PROCESS_TEST_SOURCES="process-test-sources" | GENERATE_TEST_RESOURCES="generate-test-resources" |
	//	PROCESS_TEST_RESOURCES="process-test-resources" | TEST_COMPILE="test-compile" |
	//	PROCESS_TEST_CLASSES="process-test-classes" | TEST="test" | PREPARE_PACKAGE="prepare-package" | PACKAGE="package" |
	//	PRE_INTEGRATION_TEST="pre-integration-test" | INTEGRATION_TEST="integration-test" |
	//	POST_INTEGRATION_TEST="post-integration-test" | VERIFY="verify" | INSTALL="install" | DEPLOY="deploy" |
	//	PRE_SITE="pre-site" | SITE="site" | POST_SITE="post-site" | SITE_DEPLOY="site-deploy";
	public PhaseElements getPhaseAccess() {
		return unknownRulePhase;
	}
	
	public EnumRule getPhaseRule() {
		return getPhaseAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
