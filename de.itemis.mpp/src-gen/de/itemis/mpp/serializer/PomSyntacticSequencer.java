/*
 * generated by Xtext
 */
package de.itemis.mpp.serializer;

import com.google.inject.Inject;
import de.itemis.mpp.services.PomGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class PomSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PomGrammarAccess grammarAccess;
	protected AbstractElementAlias match_SCM___RightCurlyBracketKeyword_3_1___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__a__p;
	protected AbstractElementAlias match_SCM___RightCurlyBracketKeyword_3_1_a_ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__p;
	protected AbstractElementAlias match_SCM___RightCurlyBracketKeyword_3_1_q___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__q__p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PomGrammarAccess) access;
		match_SCM___RightCurlyBracketKeyword_3_1___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getSCMAccess().getRightCurlyBracketKeyword_3_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSCMAccess().getScmKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSCMAccess().getLeftCurlyBracketKeyword_0_1())));
		match_SCM___RightCurlyBracketKeyword_3_1_a_ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__p = new GroupAlias(true, false, new TokenAlias(true, true, grammarAccess.getSCMAccess().getRightCurlyBracketKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getSCMAccess().getScmKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSCMAccess().getLeftCurlyBracketKeyword_0_1()));
		match_SCM___RightCurlyBracketKeyword_3_1_q___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getSCMAccess().getRightCurlyBracketKeyword_3_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSCMAccess().getScmKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getSCMAccess().getLeftCurlyBracketKeyword_0_1())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_SCM___RightCurlyBracketKeyword_3_1___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__a__p.equals(syntax))
				emit_SCM___RightCurlyBracketKeyword_3_1___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_SCM___RightCurlyBracketKeyword_3_1_a_ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__p.equals(syntax))
				emit_SCM___RightCurlyBracketKeyword_3_1_a_ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_SCM___RightCurlyBracketKeyword_3_1_q___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__q__p.equals(syntax))
				emit_SCM___RightCurlyBracketKeyword_3_1_q___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('}' ('scm' '{')*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     tag=STRING (ambiguity)
	 *     tag=STRING (ambiguity) 'dev' developerConncetion=STRING
	 *     tag=STRING (ambiguity) 'tag' tag=STRING
	 *     tag=STRING (ambiguity) 'url' url=STRING
	 *     tag=STRING (ambiguity) (rule end)
	 */
	protected void emit_SCM___RightCurlyBracketKeyword_3_1___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('}'* 'scm' '{')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'con' connection=STRING
	 *     connection=STRING (ambiguity) 'con' connection=STRING
	 *     developerConncetion=STRING (ambiguity) 'con' connection=STRING
	 *     url=STRING (ambiguity) 'con' connection=STRING
	 */
	protected void emit_SCM___RightCurlyBracketKeyword_3_1_a_ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('}'? ('scm' '{')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'dev' developerConncetion=STRING
	 *     (rule start) (ambiguity) 'tag' tag=STRING
	 *     (rule start) (ambiguity) 'url' url=STRING
	 *     (rule start) (ambiguity) (rule start)
	 *     connection=STRING (ambiguity) 'dev' developerConncetion=STRING
	 *     connection=STRING (ambiguity) 'tag' tag=STRING
	 *     connection=STRING (ambiguity) 'url' url=STRING
	 *     connection=STRING (ambiguity) (rule end)
	 *     developerConncetion=STRING (ambiguity) 'dev' developerConncetion=STRING
	 *     developerConncetion=STRING (ambiguity) 'tag' tag=STRING
	 *     developerConncetion=STRING (ambiguity) 'url' url=STRING
	 *     developerConncetion=STRING (ambiguity) (rule end)
	 *     url=STRING (ambiguity) 'dev' developerConncetion=STRING
	 *     url=STRING (ambiguity) 'tag' tag=STRING
	 *     url=STRING (ambiguity) 'url' url=STRING
	 *     url=STRING (ambiguity) (rule end)
	 */
	protected void emit_SCM___RightCurlyBracketKeyword_3_1_q___ScmKeyword_0_0_LeftCurlyBracketKeyword_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
