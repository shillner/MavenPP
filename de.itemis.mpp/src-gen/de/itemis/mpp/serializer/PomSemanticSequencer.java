/*
 * generated by Xtext
 */
package de.itemis.mpp.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.itemis.mpp.pom.ArtifactDefinition;
import de.itemis.mpp.pom.Coordinates;
import de.itemis.mpp.pom.Dependencies;
import de.itemis.mpp.pom.Dependency;
import de.itemis.mpp.pom.DependencyGroup;
import de.itemis.mpp.pom.DependencyInclusion;
import de.itemis.mpp.pom.ExtendedCoordinates;
import de.itemis.mpp.pom.FilePropertyInclusion;
import de.itemis.mpp.pom.ImportPropertyInclusion;
import de.itemis.mpp.pom.Modules;
import de.itemis.mpp.pom.NonVersionedCoordinates;
import de.itemis.mpp.pom.POM;
import de.itemis.mpp.pom.POMImport;
import de.itemis.mpp.pom.ParentRef;
import de.itemis.mpp.pom.Plugin;
import de.itemis.mpp.pom.PluginConfiguration;
import de.itemis.mpp.pom.PluginConfigurationParameter;
import de.itemis.mpp.pom.PluginConfigurationParameterList;
import de.itemis.mpp.pom.PluginConfigurationParameterMap;
import de.itemis.mpp.pom.PluginConfigurationParameterMapEntry;
import de.itemis.mpp.pom.PluginConfigurationParameterProperties;
import de.itemis.mpp.pom.PluginConfigurationParameterPropertyEntry;
import de.itemis.mpp.pom.PluginExecution;
import de.itemis.mpp.pom.PluginInclusion;
import de.itemis.mpp.pom.PomPackage;
import de.itemis.mpp.pom.Properties;
import de.itemis.mpp.pom.Property;
import de.itemis.mpp.pom.Repository;
import de.itemis.mpp.pom.RepositoryPolicy;
import de.itemis.mpp.pom.SCM;
import de.itemis.mpp.pom.UngroupedDependency;
import de.itemis.mpp.pom.Version;
import de.itemis.mpp.services.PomGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PomSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PomGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == PomPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case PomPackage.ARTIFACT_DEFINITION:
				sequence_ArtifactDefinition(context, (ArtifactDefinition) semanticObject); 
				return; 
			case PomPackage.COORDINATES:
				sequence_Coordinates(context, (Coordinates) semanticObject); 
				return; 
			case PomPackage.DEPENDENCIES:
				sequence_Dependencies(context, (Dependencies) semanticObject); 
				return; 
			case PomPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case PomPackage.DEPENDENCY_GROUP:
				sequence_DependencyGroup(context, (DependencyGroup) semanticObject); 
				return; 
			case PomPackage.DEPENDENCY_INCLUSION:
				sequence_DependencyInclusion(context, (DependencyInclusion) semanticObject); 
				return; 
			case PomPackage.EXTENDED_COORDINATES:
				sequence_ExtendedCoordinates(context, (ExtendedCoordinates) semanticObject); 
				return; 
			case PomPackage.FILE_PROPERTY_INCLUSION:
				sequence_FilePropertyInclusion(context, (FilePropertyInclusion) semanticObject); 
				return; 
			case PomPackage.IMPORT_PROPERTY_INCLUSION:
				sequence_ImportPropertyInclusion(context, (ImportPropertyInclusion) semanticObject); 
				return; 
			case PomPackage.MODULES:
				sequence_Modules(context, (Modules) semanticObject); 
				return; 
			case PomPackage.NON_VERSIONED_COORDINATES:
				sequence_NonVersionedCoordinates(context, (NonVersionedCoordinates) semanticObject); 
				return; 
			case PomPackage.POM:
				sequence_POM(context, (POM) semanticObject); 
				return; 
			case PomPackage.POM_IMPORT:
				sequence_POMImport(context, (POMImport) semanticObject); 
				return; 
			case PomPackage.PARENT_REF:
				sequence_ParentRef(context, (ParentRef) semanticObject); 
				return; 
			case PomPackage.PLUGIN:
				sequence_Plugin(context, (Plugin) semanticObject); 
				return; 
			case PomPackage.PLUGIN_CONFIGURATION:
				sequence_PluginConfiguration(context, (PluginConfiguration) semanticObject); 
				return; 
			case PomPackage.PLUGIN_CONFIGURATION_PARAMETER:
				sequence_PluginConfigurationParameter(context, (PluginConfigurationParameter) semanticObject); 
				return; 
			case PomPackage.PLUGIN_CONFIGURATION_PARAMETER_LIST:
				sequence_PluginConfigurationParameterList(context, (PluginConfigurationParameterList) semanticObject); 
				return; 
			case PomPackage.PLUGIN_CONFIGURATION_PARAMETER_MAP:
				sequence_PluginConfigurationParameterMap(context, (PluginConfigurationParameterMap) semanticObject); 
				return; 
			case PomPackage.PLUGIN_CONFIGURATION_PARAMETER_MAP_ENTRY:
				sequence_PluginConfigurationParameterMapEntry(context, (PluginConfigurationParameterMapEntry) semanticObject); 
				return; 
			case PomPackage.PLUGIN_CONFIGURATION_PARAMETER_PROPERTIES:
				sequence_PluginConfigurationParameterProperties(context, (PluginConfigurationParameterProperties) semanticObject); 
				return; 
			case PomPackage.PLUGIN_CONFIGURATION_PARAMETER_PROPERTY_ENTRY:
				sequence_PluginConfigurationParameterPropertyEntry(context, (PluginConfigurationParameterPropertyEntry) semanticObject); 
				return; 
			case PomPackage.PLUGIN_EXECUTION:
				sequence_PluginExecution(context, (PluginExecution) semanticObject); 
				return; 
			case PomPackage.PLUGIN_INCLUSION:
				sequence_PluginInclusion(context, (PluginInclusion) semanticObject); 
				return; 
			case PomPackage.PROPERTIES:
				sequence_Properties(context, (Properties) semanticObject); 
				return; 
			case PomPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case PomPackage.REPOSITORY:
				sequence_Repository(context, (Repository) semanticObject); 
				return; 
			case PomPackage.REPOSITORY_POLICY:
				sequence_RepositoryPolicy(context, (RepositoryPolicy) semanticObject); 
				return; 
			case PomPackage.SCM:
				sequence_SCM(context, (SCM) semanticObject); 
				return; 
			case PomPackage.UNGROUPED_DEPENDENCY:
				sequence_UngroupedDependency(context, (UngroupedDependency) semanticObject); 
				return; 
			case PomPackage.VERSION:
				sequence_Version(context, (Version) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         groupId=IDAndSpecialCharacters? 
	 *         artifactId=IDAndSpecialCharacters? 
	 *         version=Version? 
	 *         type=Text? 
	 *         artifactName=STRING? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_ArtifactDefinition(EObject context, ArtifactDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (groupId=IDAndSpecialCharacters artifactId=IDAndSpecialCharacters version=Version)
	 */
	protected void sequence_Coordinates(EObject context, Coordinates semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.COORDINATES__GROUP_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.COORDINATES__GROUP_ID));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.COORDINATES__ARTIFACT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.COORDINATES__ARTIFACT_ID));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.COORDINATES__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.COORDINATES__VERSION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCoordinatesAccess().getGroupIdIDAndSpecialCharactersParserRuleCall_0_0(), semanticObject.getGroupId());
		feeder.accept(grammarAccess.getCoordinatesAccess().getArtifactIdIDAndSpecialCharactersParserRuleCall_2_0(), semanticObject.getArtifactId());
		feeder.accept(grammarAccess.getCoordinatesAccess().getVersionVersionParserRuleCall_4_0(), semanticObject.getVersion());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (includes+=DependencyInclusion | dependencyGroups+=DependencyGroup | ungroupedDependencies+=UngroupedDependency)+
	 */
	protected void sequence_Dependencies(EObject context, Dependencies semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (scope=DependencyScope dependecies+=Dependency+)
	 */
	protected void sequence_DependencyGroup(EObject context, DependencyGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (scope=DependencyScope pomRef=[POMImport|ID])
	 */
	protected void sequence_DependencyInclusion(EObject context, DependencyInclusion semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.DEPENDENCY_INCLUSION__SCOPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.DEPENDENCY_INCLUSION__SCOPE));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.DEPENDENCY_INCLUSION__POM_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.DEPENDENCY_INCLUSION__POM_REF));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDependencyInclusionAccess().getScopeDependencyScopeEnumRuleCall_1_0(), semanticObject.getScope());
		feeder.accept(grammarAccess.getDependencyInclusionAccess().getPomRefPOMImportIDTerminalRuleCall_3_0_1(), semanticObject.getPomRef());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (optional?='optional'? coordinates=ExtendedCoordinates)
	 */
	protected void sequence_Dependency(EObject context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (groupId=IDAndSpecialCharacters artifactId=IDAndSpecialCharacters version=Version (type=ID classifier=Classifier?)?)
	 */
	protected void sequence_ExtendedCoordinates(EObject context, ExtendedCoordinates semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_FilePropertyInclusion(EObject context, FilePropertyInclusion semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.FILE_PROPERTY_INCLUSION__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.FILE_PROPERTY_INCLUSION__PATH));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFilePropertyInclusionAccess().getPathSTRINGTerminalRuleCall_3_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     pomRef=[POMImport|ID]
	 */
	protected void sequence_ImportPropertyInclusion(EObject context, ImportPropertyInclusion semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.IMPORT_PROPERTY_INCLUSION__POM_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.IMPORT_PROPERTY_INCLUSION__POM_REF));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportPropertyInclusionAccess().getPomRefPOMImportIDTerminalRuleCall_2_0_1(), semanticObject.getPomRef());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (names+=STRING names+=STRING*)
	 */
	protected void sequence_Modules(EObject context, Modules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (groupId=IDAndSpecialCharacters artifactId=IDAndSpecialCharacters)
	 */
	protected void sequence_NonVersionedCoordinates(EObject context, NonVersionedCoordinates semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.NON_VERSIONED_COORDINATES__GROUP_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.NON_VERSIONED_COORDINATES__GROUP_ID));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.NON_VERSIONED_COORDINATES__ARTIFACT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.NON_VERSIONED_COORDINATES__ARTIFACT_ID));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNonVersionedCoordinatesAccess().getGroupIdIDAndSpecialCharactersParserRuleCall_0_0(), semanticObject.getGroupId());
		feeder.accept(grammarAccess.getNonVersionedCoordinatesAccess().getArtifactIdIDAndSpecialCharactersParserRuleCall_2_0(), semanticObject.getArtifactId());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (coordinates=Coordinates name=ID)
	 */
	protected void sequence_POMImport(EObject context, POMImport semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.POM_IMPORT__COORDINATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.POM_IMPORT__COORDINATES));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.POM_IMPORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.POM_IMPORT__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPOMImportAccess().getCoordinatesCoordinatesParserRuleCall_1_0(), semanticObject.getCoordinates());
		feeder.accept(grammarAccess.getPOMImportAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         imports+=POMImport* 
	 *         parent=ParentRef? 
	 *         artifactDefinition=ArtifactDefinition 
	 *         modules=Modules? 
	 *         properties=Properties 
	 *         dependencies=Dependencies? 
	 *         scm=SCM? 
	 *         repositories+=Repository* 
	 *         buildSteps+=BuildStep*
	 *     )
	 */
	protected void sequence_POM(EObject context, POM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (coordinates=Coordinates relativePath=STRING?)
	 */
	protected void sequence_ParentRef(EObject context, ParentRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (key=ID values+=STRING values+=STRING*)
	 */
	protected void sequence_PluginConfigurationParameterList(EObject context, PluginConfigurationParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (key=ID value=STRING)
	 */
	protected void sequence_PluginConfigurationParameterMapEntry(EObject context, PluginConfigurationParameterMapEntry semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_MAP_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_MAP_ENTRY__KEY));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_MAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_MAP_ENTRY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPluginConfigurationParameterMapEntryAccess().getKeyIDTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPluginConfigurationParameterMapEntryAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (key=ID entries+=PluginConfigurationParameterMapEntry+)
	 */
	protected void sequence_PluginConfigurationParameterMap(EObject context, PluginConfigurationParameterMap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (key=ID entries+=PluginConfigurationParameterPropertyEntry+)
	 */
	protected void sequence_PluginConfigurationParameterProperties(EObject context, PluginConfigurationParameterProperties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (key=ID value=STRING)
	 */
	protected void sequence_PluginConfigurationParameterPropertyEntry(EObject context, PluginConfigurationParameterPropertyEntry semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_PROPERTY_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_PROPERTY_ENTRY__KEY));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_PROPERTY_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.PLUGIN_CONFIGURATION_PARAMETER_PROPERTY_ENTRY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPluginConfigurationParameterPropertyEntryAccess().getKeyIDTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPluginConfigurationParameterPropertyEntryAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (key=ID (value=STRING | children+=PluginConfigurationItem+)?)
	 */
	protected void sequence_PluginConfigurationParameter(EObject context, PluginConfigurationParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     configurationItems+=PluginConfigurationItem+
	 */
	protected void sequence_PluginConfiguration(EObject context, PluginConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((id=IDAndDash? phase=Phase? goals+=IDAndSpecialCharacters goals+=IDAndDash* configuration=PluginConfiguration?) | default?='default')
	 */
	protected void sequence_PluginExecution(EObject context, PluginExecution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((executionId=IDAndDash | config?='config')? pluginCoordinates=NonVersionedCoordinates pomRef=[POMImport|ID])
	 */
	protected void sequence_PluginInclusion(EObject context, PluginInclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (coordinates=Coordinates configuration=PluginConfiguration? executions+=PluginExecution*)
	 */
	protected void sequence_Plugin(EObject context, Plugin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (properties+=Property* inclusions+=PropertyInclusion*)
	 */
	protected void sequence_Properties(EObject context, Properties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=PropertyName value=STRING)
	 */
	protected void sequence_Property(EObject context, Property semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.PROPERTY__NAME));
			if(transientValues.isValueTransient(semanticObject, PomPackage.Literals.PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PomPackage.Literals.PROPERTY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPropertyAccess().getNamePropertyNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPropertyAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         disabled?='do not'? 
	 *         (releases?='releases' | snapshots?='snapshots') 
	 *         (updatePolicy=RepositoryUpdatePolicy updateInterval=INT?)? 
	 *         checksumPolicy=ChecksumPolicy?
	 *     )
	 */
	protected void sequence_RepositoryPolicy(EObject context, RepositoryPolicy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (pluginRepositroy?='plugin-repository'? id=IDAndSpecialCharacters url=STRING (name=STRING? layout=STRING? policies+=RepositoryPolicy+)?)
	 */
	protected void sequence_Repository(EObject context, Repository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (connection=STRING? developerConncetion=STRING url=STRING? tag=STRING?)
	 */
	protected void sequence_SCM(EObject context, SCM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (scope=DependencyScope? dependency=Dependency)
	 */
	protected void sequence_UngroupedDependency(EObject context, UngroupedDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((major=Number (minor=Number incremental=Number?)? qualifier=Text?) | propertyRef=PropertyRef)
	 */
	protected void sequence_Version(EObject context, Version semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
